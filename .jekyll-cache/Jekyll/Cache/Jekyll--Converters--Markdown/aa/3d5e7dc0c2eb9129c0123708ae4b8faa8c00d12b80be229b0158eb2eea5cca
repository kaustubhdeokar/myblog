I"“<p>Git is a distributed revision control system.</p>

<p>Peeling out the distributed layer -&gt; revision control system.</p>

<p>control system -&gt; content tracker.
    at itâ€™s core -&gt; persistent map.</p>

<p>every file has a hash</p>
<blockquote>
  <p>git hash-object <file-name></file-name></p>
</blockquote>

<p>To see contents of a file committed for a commit.</p>

<blockquote>
  <p>git cat-file -p <file-hash-id></file-hash-id></p>
</blockquote>

<pre><code>git cat-file -p d3e2cf226d9bc3c33ededec1aedf03723945d602

    All these files had these states during commit.

    040000 tree 6e6c53c7c92049cf68858d6efcc37f7698c4d455	database
    040000 tree 75100c61e0410021cbd38768bd63cbb9dc853e84	geolocation
    040000 tree 77d3d0eecb38b13a448555d00f440fef8e004375	logtime .....


    Expanding on this , if the same command is carried on just a file (not a folder) it will show the exact contents present during that commit.

git cat-file -p b37e5d65cecb6ce2dcda99f691404463bd28447a

</code></pre>

<h3 id="git-branches">Git branches</h3>

<p>git puts the branches in the folder .git/refs/heads
branch is just a reference to a commit. Doesnâ€™t mean anything else.</p>

<blockquote>
  <p>git checkout <branch> 
    &gt;&gt; this points the HEAD to a commit and sends it in a detached HEAD state.</branch></p>
</blockquote>

<blockquote>
  <p>git rebase &amp; git merge - the end goal is the same. rebase copies commits onto the main branch.</p>
</blockquote>

<p><img src="/myblog/assets/img/merge_rebase.jpeg" alt="" /></p>

<p>Complete git guide:
    <a href="https://dev.to/opensauced/the-power-of-git-a-guide-to-collaborative-version-control-dl6">Dev.to link</a></p>

:ET