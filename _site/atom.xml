<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Kaustubh Deokar</title>
 <link href="http://localhost:4000/myblog/atom.xml" rel="self"/>
 <link href="http://localhost:4000/myblog/"/>
 <updated>2022-07-10T23:10:43+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>String Joiner</title>
   <link href="http://localhost:4000/myblog/2021/06/07/stringjoiner"/>
   <updated>2021-06-07T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/06/07/StringJoiner</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Using a delimiter of “, “, appending strings will produce the result
  one, two, three.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;    @Test
    public void testStringJoiner() {
        StringJoiner stringJoiner = new StringJoiner(&quot;, &quot;);

        stringJoiner.add(&quot;one&quot;);
        stringJoiner.add(&quot;two&quot;);
        stringJoiner.add(&quot;three&quot;);

        Assert.assertEquals(stringJoiner.toString(), &quot;one, two, three&quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Can be done similar to a strinbuilder , as add returns the string joiner object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;    @Test
    public void testStringJoinerReturnsStringJoiner() {
        StringJoiner stringJoiner = new StringJoiner(&quot;, &quot;);

        stringJoiner.add(&quot;one&quot;).add(&quot;two&quot;).add(&quot;three&quot;);

        Assert.assertEquals(stringJoiner.toString(), &quot;one, two, three&quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Using starting and ending values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;    @Test
    public void testStringJoinerWithStartingAndEndingValues() {
        StringJoiner stringJoiner = new StringJoiner(&quot;, &quot;,&quot;Start{&quot;,&quot;}End&quot;);
        stringJoiner.add(&quot;one&quot;);
        stringJoiner.add(&quot;two&quot;);
        stringJoiner.add(&quot;three&quot;);

        Assert.assertEquals(stringJoiner.toString(), &quot;Start{one, two, three}End&quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;To create a pattern as [one], [two], [three]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void testStringJoinerCreatingSquareBracketPattern() {
    StringJoiner stringJoiner = new StringJoiner(&quot;], [&quot;,&quot;[&quot;,&quot;]&quot;);
    stringJoiner.add(&quot;one&quot;);
    stringJoiner.add(&quot;two&quot;);
    stringJoiner.add(&quot;three&quot;);

    Assert.assertEquals(stringJoiner.toString(), &quot;[one], [two], [three]&quot;);
} }
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 

</feed>
