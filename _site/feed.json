{
    "version": "https://jsonfeed.org/version/1",
    "title": "Kaustubh Deokar",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "Portfolio blog",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2024/10/22/middlewares-node",
            "title": "Middlewares",
            "summary": null,
            "content_text": "MiddlewaresA middleware is just a function.It has request, response and error object.Express or any javascript/backend framework handles middleware stack.It is in the form of a pipeline.It has the following syntax.(err, req, res, next)there are different types of middlewares. application level, router level, error handling middleware.they can call the next function in the application stack or else can return the response as res.json() or res.send().",
            "content_html": "<h1 id=\"middlewares\">Middlewares</h1><p>A middleware is just a function.It has request, response and error object.Express or any javascript/backend framework handles middleware stack.</p><p>It is in the form of a pipeline.It has the following syntax.</p><p><code class=\"language-plaintext highlighter-rouge\">(err, req, res, next)</code></p><p>there are different types of middlewares. application level, router level, error handling middleware.</p><p>they can call the next function in the application stack or else can return the response as res.json() or res.send().</p>",
            "url": "http://localhost:4000/2024/10/22/middlewares-node",
            
            
            
            
            
            "date_published": "2024-10-22T00:00:00+05:30",
            "date_modified": "2024-10-22T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/10/03/mongo-spring-default-uid-generation",
            "title": "Mongo id generation",
            "summary": null,
            "content_text": "todo:why is it so difficult to create a id generator for mongo db via spring ?ChatGPT said:ChatGPTCreating an ID generator for MongoDB via Spring can be challenging due to a few inherent complexities:MongoDB’s Default ID Generation: MongoDB already provides a default mechanism for generating unique IDs using the ObjectId type. These IDs are 12-byte hexadecimal values, ensuring uniqueness across collections. If you’re trying to override or customize this behavior, it adds complexity since MongoDB isn’t designed to rely on sequential or user-defined IDs by default.Lack of Atomic Increment: In relational databases, it’s common to use auto-incrementing fields for IDs. MongoDB does not natively support this feature. To simulate auto-incrementing IDs, developers must create a custom sequence collection or counter, which involves using a separate document to track the current sequence number and update it atomically. This introduces additional overhead in ensuring consistency and atomicity when multiple instances of your service are running.Concurrency and Performance: Handling concurrent requests for ID generation in a distributed environment is another challenge. Using a sequence collection requires careful locking or atomic updates (such as findAndModify) to prevent race conditions, which can reduce performance and scalability. When scaling the application, ensuring the atomic update mechanism doesn’t become a bottleneck adds further complexity.Distributed Systems: If your application is distributed across multiple servers, ensuring that IDs are unique without collision across instances becomes more challenging. Solutions like UUIDs are often used in distributed systems to avoid this problem, but custom ID generation mechanisms like sequential IDs need careful handling of state synchronization across nodes.Custom Solutions: Implementing your own ID generator requires careful handling of error cases (e.g., retries, handling failures in incrementing the sequence, etc.) and involves extra logic. The typical pattern of a sequence document is often unfamiliar to those coming from relational database backgrounds.To implement a custom ID generator in Spring for MongoDB, you would typically use a collection to store sequence counters, and for each insert, increment the counter atomically. You can use MongoOperations with a method like findAndModify to safely update and return the next sequence number.Here’s a basic approach for implementing a custom sequence generator:javaCopy codepublic class SequenceGeneratorService {@Autowiredprivate MongoOperations mongoOperations;public long generateSequence(String seqName) {    DatabaseSequence counter = mongoOperations.findAndModify(        Query.query(Criteria.where(\"_id\").is(seqName)),        new Update().inc(\"seq\", 1),        FindAndModifyOptions.options().returnNew(true).upsert(true),        DatabaseSequence.class);    return !Objects.isNull(counter) ? counter.getSeq() : 1;} } In this example:The DatabaseSequence document tracks the sequence for a given collection.findAndModify is used to increment and retrieve the current sequence in one atomic operation.In conclusion, the difficulty mainly stems from MongoDB’s nature of not having native support for sequential IDs, concurrency concerns, and the need for atomic updates to maintain consistency.mongo db and springs default id generation techniqueChatGPT said:ChatGPTIn Spring Data MongoDB, when working with MongoDB, the framework provides a built-in mechanism for generating unique identifiers for documents, typically using the ObjectId class. Here’s how it works:      Default ID Generation Using ObjectId:By default, if no ID is specified when saving a document, MongoDB automatically generates a 12-byte ObjectId for the _id field. This object includes information such as the timestamp, machine identifier, process identifier, and an incrementing counter, which ensures global uniqueness.In Spring Data MongoDB, if you annotate an entity’s ID field with @Id, the framework automatically uses MongoDB’s default ObjectId generation strategy if no custom value is provided.Example:javaCopy code@Document(collection = “myCollection”)public class MyEntity { @Id private String id;  // MongoDB will auto-generate an ObjectId    private String name;}In this case, MongoDB will generate an ObjectId for id unless a value is provided explicitly.        Custom ID Generation:Spring allows for custom ID generation strategies if you don’t want to use ObjectId. You can implement your own sequence-based generator or use a UUID, depending on your use case.  UUID as ID: You can replace the default ObjectId with a UUID by manually setting it in your application code.javaCopy code@Document(collection = “myCollection”)public class MyEntity {    @Id    private String id = UUID.randomUUID().toString();private String name; } Custom Sequence Generator: As mentioned before, you can also create a sequence generator to generate sequential IDs if needed. This requires maintaining a separate collection that tracks sequence numbers. Why Use ObjectId? Uniqueness: The ObjectId is guaranteed to be unique across collections, processes, and even different machines, making it ideal for distributed systems. Timestamp Information: The ObjectId contains a timestamp, which allows sorting documents by creation time without needing an explicit timestamp field. Compactness: The 12-byte size of ObjectId is compact and offers better space efficiency compared to using other types like UUID (which are 16 bytes). In summary, MongoDB's default ID generation using ObjectId is typically sufficient for most use cases, and Spring Data MongoDB embraces this by automatically using ObjectId for the _id field unless otherwise specified. If a custom ID strategy is needed, you can implement one using UUIDs or custom sequences.My code sample:Comment class.public class Comment {    @org.springframework.data.annotation.Transient    public static final String ID_VAL = \"sequence_generator\";    @org.springframework.data.annotation.Transient    public static final String GENERATED_ID = \"commentId\";    @org.springframework.data.annotation.Transient    public static final String ID_KEY = \"id\";Generate comment id:public Long generateCommentId() {    return idGeneratorService.getCommentsId(Comment.ID_KEY, Comment.ID_VAL, Comment.GENERATED_ID);}fetch comment id from db:    public Long getCommentsId(String collectionId, String collectionIdVal, String generatedIdValue) {        Query query = new Query(Criteria.where(collectionId).is(collectionIdVal));        //update the sequence no        Update update = new Update().inc(generatedIdValue, 1);        //modify in document        IdSequence counter = mongoOperations                .findAndModify(query,                        update, options().returnNew(true).upsert(true),                        IdSequence.class);        return Objects.isNull(counter) ? 1 : counter.getCommentId();    }",
            "content_html": "<p>todo:</p><p>why is it so difficult to create a id generator for mongo db via spring ?ChatGPT said:ChatGPTCreating an ID generator for MongoDB via Spring can be challenging due to a few inherent complexities:</p><p>MongoDB’s Default ID Generation: MongoDB already provides a default mechanism for generating unique IDs using the ObjectId type. These IDs are 12-byte hexadecimal values, ensuring uniqueness across collections. If you’re trying to override or customize this behavior, it adds complexity since MongoDB isn’t designed to rely on sequential or user-defined IDs by default.</p><p>Lack of Atomic Increment: In relational databases, it’s common to use auto-incrementing fields for IDs. MongoDB does not natively support this feature. To simulate auto-incrementing IDs, developers must create a custom sequence collection or counter, which involves using a separate document to track the current sequence number and update it atomically. This introduces additional overhead in ensuring consistency and atomicity when multiple instances of your service are running.</p><p>Concurrency and Performance: Handling concurrent requests for ID generation in a distributed environment is another challenge. Using a sequence collection requires careful locking or atomic updates (such as findAndModify) to prevent race conditions, which can reduce performance and scalability. When scaling the application, ensuring the atomic update mechanism doesn’t become a bottleneck adds further complexity.</p><p>Distributed Systems: If your application is distributed across multiple servers, ensuring that IDs are unique without collision across instances becomes more challenging. Solutions like UUIDs are often used in distributed systems to avoid this problem, but custom ID generation mechanisms like sequential IDs need careful handling of state synchronization across nodes.</p><p>Custom Solutions: Implementing your own ID generator requires careful handling of error cases (e.g., retries, handling failures in incrementing the sequence, etc.) and involves extra logic. The typical pattern of a sequence document is often unfamiliar to those coming from relational database backgrounds.</p><p>To implement a custom ID generator in Spring for MongoDB, you would typically use a collection to store sequence counters, and for each insert, increment the counter atomically. You can use MongoOperations with a method like findAndModify to safely update and return the next sequence number.</p><p>Here’s a basic approach for implementing a custom sequence generator:</p><p>javaCopy codepublic class SequenceGeneratorService {</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@Autowiredprivate MongoOperations mongoOperations;public long generateSequence(String seqName) {    DatabaseSequence counter = mongoOperations.findAndModify(        Query.query(Criteria.where(\"_id\").is(seqName)),        new Update().inc(\"seq\", 1),        FindAndModifyOptions.options().returnNew(true).upsert(true),        DatabaseSequence.class);    return !Objects.isNull(counter) ? counter.getSeq() : 1;} } In this example:</code></pre></div></div><p>The DatabaseSequence document tracks the sequence for a given collection.findAndModify is used to increment and retrieve the current sequence in one atomic operation.In conclusion, the difficulty mainly stems from MongoDB’s nature of not having native support for sequential IDs, concurrency concerns, and the need for atomic updates to maintain consistency.</p><p>mongo db and springs default id generation technique</p><p>ChatGPT said:ChatGPT</p><p>In Spring Data MongoDB, when working with MongoDB, the framework provides a built-in mechanism for generating unique identifiers for documents, typically using the ObjectId class. Here’s how it works:</p><ol>  <li>    <p>Default ID Generation Using ObjectId:By default, if no ID is specified when saving a document, MongoDB automatically generates a 12-byte ObjectId for the _id field. This object includes information such as the timestamp, machine identifier, process identifier, and an incrementing counter, which ensures global uniqueness.In Spring Data MongoDB, if you annotate an entity’s ID field with @Id, the framework automatically uses MongoDB’s default ObjectId generation strategy if no custom value is provided.Example:javaCopy code@Document(collection = “myCollection”)public class MyEntity { @Id private String id;  // MongoDB will auto-generate an ObjectId</p>    <p>private String name;}In this case, MongoDB will generate an ObjectId for id unless a value is provided explicitly.</p>  </li>  <li>    <p>Custom ID Generation:Spring allows for custom ID generation strategies if you don’t want to use ObjectId. You can implement your own sequence-based generator or use a UUID, depending on your use case.</p>  </li></ol><p>UUID as ID: You can replace the default ObjectId with a UUID by manually setting it in your application code.javaCopy code@Document(collection = “myCollection”)public class MyEntity {    @Id    private String id = UUID.randomUUID().toString();</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>private String name; } Custom Sequence Generator: As mentioned before, you can also create a sequence generator to generate sequential IDs if needed. This requires maintaining a separate collection that tracks sequence numbers. Why Use ObjectId? Uniqueness: The ObjectId is guaranteed to be unique across collections, processes, and even different machines, making it ideal for distributed systems. Timestamp Information: The ObjectId contains a timestamp, which allows sorting documents by creation time without needing an explicit timestamp field. Compactness: The 12-byte size of ObjectId is compact and offers better space efficiency compared to using other types like UUID (which are 16 bytes). In summary, MongoDB's default ID generation using ObjectId is typically sufficient for most use cases, and Spring Data MongoDB embraces this by automatically using ObjectId for the _id field unless otherwise specified. If a custom ID strategy is needed, you can implement one using UUIDs or custom sequences.</code></pre></div></div><p>My code sample:</p><p>Comment class.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public class Comment {    @org.springframework.data.annotation.Transient    public static final String ID_VAL = \"sequence_generator\";    @org.springframework.data.annotation.Transient    public static final String GENERATED_ID = \"commentId\";    @org.springframework.data.annotation.Transient    public static final String ID_KEY = \"id\";</code></pre></div></div><p>Generate comment id:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public Long generateCommentId() {    return idGeneratorService.getCommentsId(Comment.ID_KEY, Comment.ID_VAL, Comment.GENERATED_ID);}</code></pre></div></div><p>fetch comment id from db:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    public Long getCommentsId(String collectionId, String collectionIdVal, String generatedIdValue) {        Query query = new Query(Criteria.where(collectionId).is(collectionIdVal));        //update the sequence no        Update update = new Update().inc(generatedIdValue, 1);        //modify in document        IdSequence counter = mongoOperations                .findAndModify(query,                        update, options().returnNew(true).upsert(true),                        IdSequence.class);        return Objects.isNull(counter) ? 1 : counter.getCommentId();    }</code></pre></div></div>",
            "url": "http://localhost:4000/2024/10/03/mongo-spring-default-uid-generation",
            
            
            
            
            
            "date_published": "2024-10-03T00:00:00+05:30",
            "date_modified": "2024-10-03T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/11/bloom-filters",
            "title": "Range Sum Query - Mutable",
            "summary": null,
            "content_text": "Bloom filters  -&gt; can report false positives, but can never report false negative.User likes ribeye and potato and doesn’t like pork chop.This case gives us correct result.  User doesn’t like lemon but the bloom filter denotes it likes lemon.  But the case can never happen where user likes something and it doesn’t return the result as negative.Hence false negatives cannot happen.That’s why for searching in a large data we can use bloom filters.",
            "content_html": "<p>Bloom filters</p><ul>  <li><img src=\"/assets/img/false-pos-false-neg.png\" alt=\"false-pos-false-neg.png\" /></li></ul><p>-&gt; can report false positives, but can never report false negative.</p><p>User likes ribeye and potato and doesn’t like pork chop.This case gives us correct result.</p><ul>  <li><img src=\"/assets/img/bloom-filter-true-negative.png\" alt=\"Bloom filter true negative\" /></li></ul><p>User doesn’t like lemon but the bloom filter denotes it likes lemon.</p><ul>  <li><img src=\"/assets/img/bloom-filter-false-positive.png\" alt=\"Bloom filter false positive\" /></li></ul><p>But the case can never happen where user likes something and it doesn’t return the result as negative.</p><p>Hence false negatives cannot happen.</p><p>That’s why for searching in a large data we can use bloom filters.</p>",
            "url": "http://localhost:4000/2024/09/11/bloom-filters",
            "image": "/assets/img/false-pos-false-neg.png",
            
            
            
            
            "date_published": "2024-09-11T00:00:00+05:30",
            "date_modified": "2024-09-11T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/08/18/spring-dependency-injection",
            "title": "Spring",
            "summary": null,
            "content_text": "Spring  Why to avoid the field injection:          Testability of the application is easier when using constructor injection.      Fields are not immutable. States can be changed after initialization.      Constructor injection makes it apparant that the depdendencies are growing and that there’s a need for refactoring.            ",
            "content_html": "<p>Spring</p><ul>  <li>Why to avoid the field injection:    <ul>      <li>Testability of the application is easier when using constructor injection.</li>      <li>Fields are not immutable. States can be changed after initialization.</li>      <li>Constructor injection makes it apparant that the depdendencies are growing and that there’s a need for refactoring.</li>      <li></li>    </ul>  </li></ul>",
            "url": "http://localhost:4000/2024/08/18/spring-dependency-injection",
            
            
            
            
            
            "date_published": "2024-08-18T00:00:00+05:30",
            "date_modified": "2024-08-18T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/08/18/maven-lifecycle",
            "title": "Maven Lifecycle",
            "summary": null,
            "content_text": "Maven LifecycleCategories:  todayILearnedOverviewMaven operates with three primary built-in lifecycles:  Default Lifecycle: The main lifecycle responsible for project deployment. It consists of a series of phases executed in order.  Clean Lifecycle: Manages project cleaning, such as removing files generated in previous builds.  Site Lifecycle: Generates project documentation.Default Lifecycle PhasesThe default lifecycle consists of several phases, each performing a specific task:  validate: Validates the project structure and configuration.  compile: Compiles the source code of the project.  test: Runs unit tests using a suitable testing framework.  package: Packages the compiled code into a distributable format (e.g., JAR, WAR).  verify: Runs checks on the results of integration tests to ensure quality criteria are met.  install: Installs the package into the local repository for use as a dependency in other projects.  deploy: Deploys the package to a remote repository for sharing with other developers and projects.Site Lifecycle PhasesThe site lifecycle is responsible for creating project documentation. To generate the site, run the following command:mvn siteExecuting Maven PhasesYou can execute a specific phase by running the following command:mvn &lt;phase&gt;Goal BindingEach phase in a lifecycle is bound to one or more plugin goals. For example, in the compile phase, the maven-compiler-plugin:compile goal is executed.Example: Integrating maven-checkstyle-plugin&lt;project&gt;    ...    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;                &lt;version&gt;3.2.2&lt;/version&gt; &lt;!-- Use the latest version available --&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;phase&gt;validate&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;check&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;                &lt;configuration&gt;                    &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;                    &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;                    &lt;failsOnError&gt;true&lt;/failsOnError&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;    ...&lt;/project&gt;Creating a Checkstyle Configuration FileYou need to create a checkstyle.xml configuration file:&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE module PUBLIC    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"&gt;&lt;module name=\"Checker\"&gt;    &lt;module name=\"TreeWalker\"&gt;        &lt;module name=\"JavadocMethod\"/&gt;        &lt;module name=\"MagicNumber\"/&gt;        &lt;module name=\"IllegalImport\"/&gt;        &lt;module name=\"LineLength\"&gt;            &lt;property name=\"max\" value=\"120\"/&gt;        &lt;/module&gt;        &lt;module name=\"WhitespaceAround\"/&gt;    &lt;/module&gt;&lt;/module&gt;The complete list of configurations can be found here: https://checkstyle.org/index.htmlThis file can be placed in your project’s root directory or in the src/main/resources directory.To run the checkstyle plugin, use:mvn checkstyle:checkor it will run during:mvn validate",
            "content_html": "<h1 id=\"maven-lifecycle\">Maven Lifecycle</h1><h3 id=\"categories\">Categories:</h3><ul>  <li>todayILearned</li></ul><hr /><h2 id=\"overview\">Overview</h2><p>Maven operates with three primary built-in lifecycles:</p><ol>  <li><strong>Default Lifecycle</strong>: The main lifecycle responsible for project deployment. It consists of a series of phases executed in order.</li>  <li><strong>Clean Lifecycle</strong>: Manages project cleaning, such as removing files generated in previous builds.</li>  <li><strong>Site Lifecycle</strong>: Generates project documentation.</li></ol><hr /><h2 id=\"default-lifecycle-phases\">Default Lifecycle Phases</h2><p>The default lifecycle consists of several phases, each performing a specific task:</p><ul>  <li><strong>validate</strong>: Validates the project structure and configuration.</li>  <li><strong>compile</strong>: Compiles the source code of the project.</li>  <li><strong>test</strong>: Runs unit tests using a suitable testing framework.</li>  <li><strong>package</strong>: Packages the compiled code into a distributable format (e.g., JAR, WAR).</li>  <li><strong>verify</strong>: Runs checks on the results of integration tests to ensure quality criteria are met.</li>  <li><strong>install</strong>: Installs the package into the local repository for use as a dependency in other projects.</li>  <li><strong>deploy</strong>: Deploys the package to a remote repository for sharing with other developers and projects.</li></ul><hr /><h2 id=\"site-lifecycle-phases\">Site Lifecycle Phases</h2><p>The site lifecycle is responsible for creating project documentation. To generate the site, run the following command:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn site</code></pre></div></div><p>Executing Maven PhasesYou can execute a specific phase by running the following command:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn &lt;phase&gt;</code></pre></div></div><h2 id=\"goal-binding\">Goal Binding</h2><p>Each phase in a lifecycle is bound to one or more plugin goals. For example, in the <code class=\"language-plaintext highlighter-rouge\">compile</code> phase, the <code class=\"language-plaintext highlighter-rouge\">maven-compiler-plugin:compile</code> goal is executed.</p><h3 id=\"example-integrating-maven-checkstyle-plugin\">Example: Integrating <code class=\"language-plaintext highlighter-rouge\">maven-checkstyle-plugin</code></h3><div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>    ...    <span class=\"nt\">&lt;build&gt;</span>        <span class=\"nt\">&lt;plugins&gt;</span>            <span class=\"nt\">&lt;plugin&gt;</span>                <span class=\"nt\">&lt;groupId&gt;</span>org.apache.maven.plugins<span class=\"nt\">&lt;/groupId&gt;</span>                <span class=\"nt\">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>                <span class=\"nt\">&lt;version&gt;</span>3.2.2<span class=\"nt\">&lt;/version&gt;</span> <span class=\"c\">&lt;!-- Use the latest version available --&gt;</span>                <span class=\"nt\">&lt;executions&gt;</span>                    <span class=\"nt\">&lt;execution&gt;</span>                        <span class=\"nt\">&lt;phase&gt;</span>validate<span class=\"nt\">&lt;/phase&gt;</span>                        <span class=\"nt\">&lt;goals&gt;</span>                            <span class=\"nt\">&lt;goal&gt;</span>check<span class=\"nt\">&lt;/goal&gt;</span>                        <span class=\"nt\">&lt;/goals&gt;</span>                    <span class=\"nt\">&lt;/execution&gt;</span>                <span class=\"nt\">&lt;/executions&gt;</span>                <span class=\"nt\">&lt;configuration&gt;</span>                    <span class=\"nt\">&lt;configLocation&gt;</span>checkstyle.xml<span class=\"nt\">&lt;/configLocation&gt;</span>                    <span class=\"nt\">&lt;encoding&gt;</span>UTF-8<span class=\"nt\">&lt;/encoding&gt;</span>                    <span class=\"nt\">&lt;consoleOutput&gt;</span>true<span class=\"nt\">&lt;/consoleOutput&gt;</span>                    <span class=\"nt\">&lt;failsOnError&gt;</span>true<span class=\"nt\">&lt;/failsOnError&gt;</span>                <span class=\"nt\">&lt;/configuration&gt;</span>            <span class=\"nt\">&lt;/plugin&gt;</span>        <span class=\"nt\">&lt;/plugins&gt;</span>    <span class=\"nt\">&lt;/build&gt;</span>    ...<span class=\"nt\">&lt;/project&gt;</span></code></pre></div></div><h3 id=\"creating-a-checkstyle-configuration-file\">Creating a Checkstyle Configuration File</h3><p>You need to create a <code class=\"language-plaintext highlighter-rouge\">checkstyle.xml</code> configuration file:</p><div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span><span class=\"cp\">&lt;!DOCTYPE module PUBLIC    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"&gt;</span><span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"Checker\"</span><span class=\"nt\">&gt;</span>    <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"TreeWalker\"</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"JavadocMethod\"</span><span class=\"nt\">/&gt;</span>        <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"MagicNumber\"</span><span class=\"nt\">/&gt;</span>        <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"IllegalImport\"</span><span class=\"nt\">/&gt;</span>        <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"LineLength\"</span><span class=\"nt\">&gt;</span>            <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"max\"</span> <span class=\"na\">value=</span><span class=\"s\">\"120\"</span><span class=\"nt\">/&gt;</span>        <span class=\"nt\">&lt;/module&gt;</span>        <span class=\"nt\">&lt;module</span> <span class=\"na\">name=</span><span class=\"s\">\"WhitespaceAround\"</span><span class=\"nt\">/&gt;</span>    <span class=\"nt\">&lt;/module&gt;</span><span class=\"nt\">&lt;/module&gt;</span></code></pre></div></div><p>The complete list of configurations can be found here: https://checkstyle.org/index.html</p><p>This file can be placed in your project’s root directory or in the src/main/resources directory.</p><p>To run the checkstyle plugin, use:<code class=\"language-plaintext highlighter-rouge\">mvn checkstyle:check</code>or it will run during:<code class=\"language-plaintext highlighter-rouge\">mvn validate</code></p>",
            "url": "http://localhost:4000/2024/08/18/maven-lifecycle",
            
            
            
            
            
            "date_published": "2024-08-18T00:00:00+05:30",
            "date_modified": "2024-08-18T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/08/01/token-storage",
            "title": "Token Storage",
            "summary": null,
            "content_text": "When storing JWT token or any sensitive user information, where should it be stored ?Local storage:  It’s simple and easy, but not secure, as it is prone to *XSS attacks. It is not deleted automatically and has to be explicitly deleted. Hence, not recommended.HTTP Only Cookies:  Not accessible by Javascript, hence XSS issue is mitigated. Cookies are included in every request. Can be marked as secure, have specific expiration times. May lead to CSRF attacks if not implemented proper protection mechanisms.* XSS attack - cross side scripting.  User injecting malicious content on website.  Like finding a way to add some &lt;script&gt; element extracting sensitive information.  Hence user input should be encoded before being displayed.  Using security headers, which limit the content that can be loaded and executed on site.  When inserting user input, escape special characters.",
            "content_html": "<p>When storing JWT token or any sensitive user information, where should it be stored ?</p><h3 id=\"local-storage\">Local storage:</h3><blockquote>  <p>It’s simple and easy, but not secure, as it is prone to *XSS attacks. It is not deleted automatically and has to be explicitly deleted. Hence, not recommended.</p></blockquote><h3 id=\"http-only-cookies\">HTTP Only Cookies:</h3><blockquote>  <p>Not accessible by Javascript, hence XSS issue is mitigated. Cookies are included in every request. Can be marked as secure, have specific expiration times. May lead to CSRF attacks if not implemented proper protection mechanisms.</p></blockquote><p>* XSS attack - cross side scripting.</p><ul>  <li>User injecting malicious content on website.</li>  <li>Like finding a way to add some &lt;script&gt; element extracting sensitive information.</li>  <li>Hence user input should be encoded before being displayed.</li>  <li>Using security headers, which limit the content that can be loaded and executed on site.</li>  <li>When inserting user input, escape special characters.</li></ul>",
            "url": "http://localhost:4000/2024/08/01/token-storage",
            
            
            
            
            
            "date_published": "2024-08-01T00:00:00+05:30",
            "date_modified": "2024-08-01T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/06/05/grpc-101",
            "title": "GRPC",
            "summary": null,
            "content_text": "BackgroundNeed for grpc ?  SOAP, REST or GraphQL do not solve the problem of bidirectional communication.  Any communication protocol needs client library to work. (When communication is done through the web, web browser is the client library)  If the user uses any client library, it has to be maintained, which is not ideal.  Why to use it ?  High performance - HTTP/2.  gRPC uses Protocol Buffers for compact and fast serialization, ensuring efficient data exchange.  Good support for various programming languages.  gRPC simplifies implementing secure and scalable microservices. With built-in support for authentication, load balancing, and service discovery,  Lastly, its rich ecosystem and active community provide extensive resources, tools, and ongoing improvements.Working/Flow of grpc.  Implementation theoryHow to implement you start with a proto file.each language has library/plugin support to generate classes based on the proto file.These classes are known as stubs.Server side implements a service class which contains the actual business logic.Client side - writes a client to invoke methods on server based upon it’s local stub.client and server communicate with each other through http 2.Code  Github link",
            "content_html": "<h3 id=\"background\">Background</h3><h4 id=\"need-for-grpc-\">Need for grpc ?</h4><ul>  <li>SOAP, REST or GraphQL do not solve the problem of bidirectional communication.</li>  <li>Any communication protocol needs client library to work. (When communication is done through the web, web browser is the client library)</li>  <li>If the user uses any client library, it has to be maintained, which is not ideal.</li>  <li><img src=\"/assets/img/grpcvslibrary.png\" alt=\"\" /></li></ul><h4 id=\"why-to-use-it-\">Why to use it ?</h4><ul>  <li>High performance - HTTP/2.</li>  <li>gRPC uses Protocol Buffers for compact and fast serialization, ensuring efficient data exchange.</li>  <li>Good support for various programming languages.</li>  <li>gRPC simplifies implementing secure and scalable microservices. With built-in support for authentication, load balancing, and service discovery,</li>  <li>Lastly, its rich ecosystem and active community provide extensive resources, tools, and ongoing improvements.</li></ul><h3 id=\"workingflow-of-grpc\">Working/Flow of grpc.</h3><ul>  <li><img src=\"/assets/img/grpc-architecture.png\" alt=\"\" /></li></ul><h3 id=\"implementation-theory\">Implementation theory</h3><p>How to implement you start with a proto file.</p><p>each language has library/plugin support to generate classes based on the proto file.These classes are known as stubs.</p><p>Server side implements a service class which contains the actual business logic.Client side - writes a client to invoke methods on server based upon it’s local stub.</p><p>client and server communicate with each other through http 2.</p><h3 id=\"code\">Code</h3><ul>  <li><a href=\"https://github.com/kaustubhdeokar/Backend-mini-project-implementations\">Github link</a></li></ul>",
            "url": "http://localhost:4000/2024/06/05/grpc-101",
            "image": "/assets/img/grpcvslibrary.png",
            
            
            
            
            "date_published": "2024-06-05T00:00:00+05:30",
            "date_modified": "2024-06-05T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/06/02/what-is",
            "title": "Terminologies/How-to's",
            "summary": null,
            "content_text": "Object stores - Collection of html, css, js, resource files which can beMysql dump  mysqldump -u  -p  mysqldump -u root -p dealsplus &gt; db-schema.sqlS  Strongly typed language - variable types is pre-declared.",
            "content_html": "<p>Object stores - Collection of html, css, js, resource files which can be</p><h2 id=\"mysql-dump\">Mysql dump</h2><blockquote>  <p>mysqldump -u <username> -p <database-name> <local-sql-file>mysqldump -u root -p dealsplus &gt; db-schema.sql</local-sql-file></database-name></username></p></blockquote><h2 id=\"s\">S</h2><ul>  <li>Strongly typed language - variable types is pre-declared.</li></ul>",
            "url": "http://localhost:4000/2024/06/02/what-is",
            
            
            
            
            
            "date_published": "2024-06-02T00:00:00+05:30",
            "date_modified": "2024-06-02T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/06/01/javascript-concepts",
            "title": "Javascript Concepts.",
            "summary": null,
            "content_text": "JavaScript ConceptsTable of Contents  JavaScript Concepts          Table of Contents      Execution Context      Call Stack      Scope      Variable Declarations      Shadowing      Closure      Function Statement \\&amp; Function Declaration      Function Expression      First Class Functions      Callback Functions      Event Loop      JavaScript Runtime Environment      Tasks Done by Runtime Environment      Set Timeout      Execution Context  Everything happens inside an execution context.  Execution context has a memory component and a code component.  It is single-threaded and synchronous.Call Stack  Execution contexts are managed by call stacks.Scope  Directly related to lexical environment.          Lexical - in hierarchy.      Lexical environment of a function: its local memory plus the lexical environment of its parent.      In simple terms, a child will be able to access things locally declared, plus the things declared by its parents.      This hierarchical searching in the functions, starting from the child to its parent, is known as SCOPE CHAIN.      Variable Declarations  Types of variable declarations in JavaScript.          We can access variables declared with the var keyword before they are declared as they are declared in the global scope.      let and const are hoisted but they cannot be used unless assigned because they are not declared in the global scope but a separate scope (SCRIPT/BLOCK). They are put in something called as temporal dead zone.      If a user tries to fetch the variable declared by let or const before it is assigned, we get a reference error.      We will also get a reference error if a variable which is not declared is tried to be accessed during the program.      Shadowingvar a = 100;{    var a = 10; // a shadows the global 'a'    let b = 20;    const c = 30;    console.log(a);    console.log(b);    console.log(c);}Closurefunction x() {    let a = 10;    return function y() {        console.log(a);    }}let z = x();z();// Even though function y is done execution, it still has access to the variable 'a' from function x.// This is known as closure.  Function bundled with its lexical environment.  Whenever the function is returned, even if it’s vanished in execution context, it still remembers the reference it was pointing to. Please note, the reference, not the value!Function Statement &amp; Function Declaration  Function statements and function declarations are used interchangeably.// Function statement -&gt; function declarationfunction y() {    console.log('hello y');}Function Expressionvar b = function () {    console.log('hello b');}  The difference between function statement and function expression is hoisting.      We can access y before declaring but b will give us an error if accessed before declaring.    params -&gt; function parameters  args -&gt; with which a function is called.First Class Functions  The ability to use functions as values, arguments, can be executed inside a closed function, and can be taken as return form.Callback Functions  Functions attached to some event, like on click or setTimeout when time expired, where the code executes after the time countdown is done.function x() {    let count = 0;    const el = document.getElementById(\"clickhere\");    if (el) {        el.addEventListener(\"click\", function xyz() {            console.log(count++);        }, false);    } else {        console.log(\"Element not found\");    }}window.onload = function () {    x();}Above is a callback function with a closure.Event LoopWhen the timer gets expired for a callback function, the web APIs (browser context) or C++ APIs in the Node context put the callback function in the callback queue. Then the EVENT loop puts them into the execution stack.The same is the case with addEventListener -&gt; when some functionality has to be executed on click. When the respective button is clicked, the callback function is put in the callback queue, and then the event loop puts it on the execution stack.              Mutation observer -&gt; if there is some mutation in the DOM tree, it might run some callback functions. So it also populates the microtask queue.  In the above example, there are 3 things happening:  Code execution  Fetch call  Callback function with a timer.  Browser has superpowers that are lent to JS engine to execute some tasks. These superpowers include web APIs such as console, location, DOM API, setTimeout, fetch, local storage.  Callback functions and event handlers are first stored in the Web API environment and then transferred to the callback queue.  Promises and mutation observers are stored in the API environment and then transferred to the microtask queue.  Event loop continuously observes call stack and when it is empty, it transfers task to call stack.  Microtasks are given priority over callback tasks.  Too many microtasks generated can cause starvation (not giving time to callback tasks to execute).JavaScript Runtime Environment  We need one to execute JS.  Browsers have it built-in. Another example is Node.js.Tasks Done by Runtime Environment  Parsing the JavaScript code to form an AST (Abstract Syntax Tree).  JavaScript can execute code using an interpreter or compiler both. Most modern browsers now support a JIT compilation which has the ability to interpret and compile the code.  After parsing, the interpreter starts interpreting the code line by line. The compiler also helps to optimize it. The algorithm to do so may differ from engine to engine.  After which they go for execution, and where the memory heap and execution stack come into the picture.  Garbage collector - mark and sweep algorithm.Set TimeoutThe setTimeout will be put in the execution stack only after IT IS EMPTY. So, in short, it is guaranteed to run after AT LEAST 2 seconds as per the below example.console.log(\"start\");setTimeout(() =&gt; {    console.log(\"after 2 seconds\");}, 2000);var startTime = new Date().getTime();var endTime = new Date().getTime();while (endTime - startTime &lt; 10000) {    endTime = new Date().getTime();}console.log(\"end\");",
            "content_html": "<h1 id=\"javascript-concepts\">JavaScript Concepts</h1><h2 id=\"table-of-contents\">Table of Contents</h2><ul>  <li><a href=\"#javascript-concepts\">JavaScript Concepts</a>    <ul>      <li><a href=\"#table-of-contents\">Table of Contents</a></li>      <li><a href=\"#execution-context\">Execution Context</a></li>      <li><a href=\"#call-stack\">Call Stack</a></li>      <li><a href=\"#scope\">Scope</a></li>      <li><a href=\"#variable-declarations\">Variable Declarations</a></li>      <li><a href=\"#shadowing\">Shadowing</a></li>      <li><a href=\"#closure\">Closure</a></li>      <li><a href=\"#function-statement--function-declaration\">Function Statement \\&amp; Function Declaration</a></li>      <li><a href=\"#function-expression\">Function Expression</a></li>      <li><a href=\"#first-class-functions\">First Class Functions</a></li>      <li><a href=\"#callback-functions\">Callback Functions</a></li>      <li><a href=\"#event-loop\">Event Loop</a></li>      <li><a href=\"#javascript-runtime-environment\">JavaScript Runtime Environment</a></li>      <li><a href=\"#tasks-done-by-runtime-environment\">Tasks Done by Runtime Environment</a></li>      <li><a href=\"#set-timeout\">Set Timeout</a></li>    </ul>  </li></ul><h2 id=\"execution-context\">Execution Context</h2><ul>  <li>Everything happens inside an execution context.</li>  <li>Execution context has a memory component and a code component.</li>  <li>It is single-threaded and synchronous.</li></ul><h2 id=\"call-stack\">Call Stack</h2><ul>  <li>Execution contexts are managed by call stacks.</li></ul><h2 id=\"scope\">Scope</h2><ul>  <li>Directly related to lexical environment.    <ul>      <li>Lexical - in hierarchy.</li>      <li>Lexical environment of a function: its local memory plus the lexical environment of its parent.</li>      <li>In simple terms, a child will be able to access things locally declared, plus the things declared by its parents.</li>      <li>This hierarchical searching in the functions, starting from the child to its parent, is known as <strong>SCOPE CHAIN</strong>.</li>    </ul>  </li></ul><h2 id=\"variable-declarations\">Variable Declarations</h2><ul>  <li>Types of variable declarations in JavaScript.    <ul>      <li>We can access variables declared with the <code class=\"language-plaintext highlighter-rouge\">var</code> keyword before they are declared as they are declared in the global scope.</li>      <li><code class=\"language-plaintext highlighter-rouge\">let</code> and <code class=\"language-plaintext highlighter-rouge\">const</code> are hoisted but they cannot be used unless assigned because they are not declared in the global scope but a separate scope <strong>(SCRIPT/BLOCK)</strong>. They are put in something called as temporal dead zone.</li>      <li>If a user tries to fetch the variable declared by <code class=\"language-plaintext highlighter-rouge\">let</code> or <code class=\"language-plaintext highlighter-rouge\">const</code> before it is assigned, we get a <strong>reference error</strong>.</li>      <li>We will also get a reference error if a variable which is not declared is tried to be accessed during the program.</li>    </ul>  </li></ul><h2 id=\"shadowing\">Shadowing</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"c1\">// a shadows the global 'a'</span>    <span class=\"kd\">let</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>    <span class=\"kd\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">;</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"closure\">Closure</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">x</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"nx\">y</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">let</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">();</span><span class=\"nx\">z</span><span class=\"p\">();</span><span class=\"c1\">// Even though function y is done execution, it still has access to the variable 'a' from function x.</span><span class=\"c1\">// This is known as closure.</span></code></pre></div></div><ul>  <li>Function bundled with its lexical environment.</li>  <li>Whenever the function is returned, even if it’s vanished in execution context, it still remembers the reference it was pointing to. Please note, the reference, not the value!</li></ul><h2 id=\"function-statement--function-declaration\">Function Statement &amp; Function Declaration</h2><ul>  <li>Function statements and function declarations are used interchangeably.</li></ul><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Function statement -&gt; function declaration</span><span class=\"kd\">function</span> <span class=\"nx\">y</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">hello y</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"function-expression\">Function Expression</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">hello b</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><ul>  <li>The difference between function statement and function expression is hoisting.</li>  <li>    <p>We can access <code class=\"language-plaintext highlighter-rouge\">y</code> before declaring but <code class=\"language-plaintext highlighter-rouge\">b</code> will give us an error if accessed before declaring.</p>  </li>  <li>params -&gt; function parameters</li>  <li>args -&gt; with which a function is called.</li></ul><h2 id=\"first-class-functions\">First Class Functions</h2><ul>  <li>The ability to use functions as values, arguments, can be executed inside a closed function, and can be taken as return form.</li></ul><h2 id=\"callback-functions\">Callback Functions</h2><ul>  <li>Functions attached to some event, like on click or setTimeout when time expired, where the code executes after the time countdown is done.</li></ul><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">x</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">clickhere</span><span class=\"dl\">\"</span><span class=\"p\">);</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">xyz</span><span class=\"p\">()</span> <span class=\"p\">{</span>            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"o\">++</span><span class=\"p\">);</span>        <span class=\"p\">},</span> <span class=\"kc\">false</span><span class=\"p\">);</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Element not found</span><span class=\"dl\">\"</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">x</span><span class=\"p\">();</span><span class=\"p\">}</span></code></pre></div></div><p>Above is a callback function with a closure.</p><h2 id=\"event-loop\">Event Loop</h2><p>When the timer gets expired for a callback function, the web APIs (browser context) or C++ APIs in the Node context put the callback function in the callback queue. Then the EVENT loop puts them into the execution stack.</p><p>The same is the case with addEventListener -&gt; when some functionality has to be executed on click. When the respective button is clicked, the callback function is put in the callback queue, and then the event loop puts it on the execution stack.</p><ul>  <li>    <p><img src=\"/assets/img/event_loop.png\" alt=\"\" /></p>  </li>  <li>    <p>Mutation observer -&gt; if there is some mutation in the DOM tree, it might run some callback functions. So it also populates the microtask queue.</p>  </li></ul><p>In the above example, there are 3 things happening:</p><ul>  <li>Code execution</li>  <li>Fetch call</li>  <li>Callback function with a timer.</li></ul><ol>  <li>Browser has superpowers that are lent to JS engine to execute some tasks. These superpowers include web APIs such as console, location, DOM API, setTimeout, fetch, local storage.</li>  <li>Callback functions and event handlers are first stored in the Web API environment and then transferred to the callback queue.</li>  <li>Promises and mutation observers are stored in the API environment and then transferred to the microtask queue.</li>  <li>Event loop continuously observes call stack and when it is empty, it transfers task to call stack.</li>  <li>Microtasks are given priority over callback tasks.</li>  <li>Too many microtasks generated can cause starvation (not giving time to callback tasks to execute).</li></ol><h2 id=\"javascript-runtime-environment\">JavaScript Runtime Environment</h2><ul>  <li>We need one to execute JS.</li>  <li>Browsers have it built-in. Another example is Node.js.</li></ul><h2 id=\"tasks-done-by-runtime-environment\">Tasks Done by Runtime Environment</h2><ul>  <li>Parsing the JavaScript code to form an AST (Abstract Syntax Tree).</li>  <li>JavaScript can execute code using an interpreter or compiler both. Most modern browsers now support a JIT compilation which has the ability to interpret and compile the code.</li>  <li>After parsing, the interpreter starts interpreting the code line by line. The compiler also helps to optimize it. The algorithm to do so may differ from engine to engine.</li>  <li>After which they go for execution, and where the memory heap and execution stack come into the picture.</li>  <li>Garbage collector - mark and sweep algorithm.</li></ul><h2 id=\"set-timeout\">Set Timeout</h2><p>The <code class=\"language-plaintext highlighter-rouge\">setTimeout</code> will be put in the execution stack only after IT IS EMPTY. So, in short, it is guaranteed to run after AT LEAST 2 seconds as per the below example.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">start</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">after 2 seconds</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"p\">},</span> <span class=\"mi\">2000</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">startTime</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getTime</span><span class=\"p\">();</span><span class=\"kd\">var</span> <span class=\"nx\">endTime</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getTime</span><span class=\"p\">();</span><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">endTime</span> <span class=\"o\">-</span> <span class=\"nx\">startTime</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">endTime</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getTime</span><span class=\"p\">();</span><span class=\"p\">}</span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">);</span></code></pre></div></div>",
            "url": "http://localhost:4000/2024/06/01/javascript-concepts",
            "image": "/assets/img/event_loop.png",
            
            
            
            
            "date_published": "2024-06-01T00:00:00+05:30",
            "date_modified": "2024-06-01T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/02/11/mathematics",
            "title": "Mathematics",
            "summary": null,
            "content_text": "Mathematics.Modular exponentiation  Problem statement. Calculate x^n % m  For large n , like 10^18, could be time consuming even for O(n).  Using following method.  How it works.    To calculate 2^10 % x    on even powers, like 10 -&gt; (2^2)^5 =&gt; 4^5 //straightaway halving the power.     for odd powers, 4 * (4^4) , power-=1, store the result of first part of operation and continue process.        // 2^10      oddPowMultiplier=1    evenPowMultiplier=2   p=10        // (4)^5     oddPowMultiplier=1    evenPowMultiplier=4   p=5        // 4*(4^4)   oddPowMultiplier=4    evenPowMultiplier=4   p=4        // 4*(16^2)  oddPowMultiplier=4    evenPowMultiplier=16  p=2        // 4*(256^1) oddPowMultiplier=4    evenPowMultiplier=256 p=1        // 4*256     oddPowMultiplier=1024 evenPowMultiplier=256 p=0  Codepublic static int exponential(int number, int power, int mod) {                int evenPowMultiplier = number;        int oddPowMultiplier = 1;        while (power &gt; 0) {            if (power % 2 == 0) {                evenPowMultiplier *= evenPowMultiplier;                power /= 2;            } else {                oddPowMultiplier *= evenPowMultiplier;                power -= 1;            }            //modulo should be done here to for evenPowMul &amp; oddPowMul            System.out.print(\"oddPowMultiplier:\" + oddPowMultiplier);            System.out.println(\" evenPowMultiplier:\" + evenPowMultiplier);        }        return oddPowMultiplier % mod;    }",
            "content_html": "<h3 id=\"mathematics\">Mathematics.</h3><p>Modular exponentiation</p><ul>  <li>Problem statement. Calculate x^n % m</li>  <li>For large n , like 10^18, could be time consuming even for O(n).<br /></li>  <li>Using following method.</li></ul><blockquote>  <p>How it works.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    To calculate 2^10 % x    on even powers, like 10 -&gt; (2^2)^5 =&gt; 4^5 //straightaway halving the power.     for odd powers, 4 * (4^4) , power-=1, store the result of first part of operation and continue process.        // 2^10      oddPowMultiplier=1    evenPowMultiplier=2   p=10        // (4)^5     oddPowMultiplier=1    evenPowMultiplier=4   p=5        // 4*(4^4)   oddPowMultiplier=4    evenPowMultiplier=4   p=4        // 4*(16^2)  oddPowMultiplier=4    evenPowMultiplier=16  p=2        // 4*(256^1) oddPowMultiplier=4    evenPowMultiplier=256 p=1        // 4*256     oddPowMultiplier=1024 evenPowMultiplier=256 p=0</code></pre></div></div><blockquote>  <p>Code</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public static int exponential(int number, int power, int mod) {                int evenPowMultiplier = number;        int oddPowMultiplier = 1;        while (power &gt; 0) {            if (power % 2 == 0) {                evenPowMultiplier *= evenPowMultiplier;                power /= 2;            } else {                oddPowMultiplier *= evenPowMultiplier;                power -= 1;            }            //modulo should be done here to for evenPowMul &amp; oddPowMul            System.out.print(\"oddPowMultiplier:\" + oddPowMultiplier);            System.out.println(\" evenPowMultiplier:\" + evenPowMultiplier);        }        return oddPowMultiplier % mod;    }</code></pre></div></div>",
            "url": "http://localhost:4000/2024/02/11/mathematics",
            
            
            
            
            
            "date_published": "2024-02-11T00:00:00+05:30",
            "date_modified": "2024-02-11T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/08/03/java-concepts",
            "title": "Exceptions in Java.",
            "summary": null,
            "content_text": "Exceptions  Checked - checked at compile time  eg: filenotfound exception. we need to handle them, the program will fail to compile otherwise.  Unchecked - checked at runtime.eg:nullpointer exception, string.length() -&gt; throws nullpointer if string is null.",
            "content_html": "<h2 id=\"exceptions\">Exceptions</h2><blockquote>  <p>Checked - checked at compile time <br /> eg: filenotfound exception. <br />we need to handle them, the program will fail to compile otherwise.</p></blockquote><blockquote>  <p>Unchecked - checked at runtime.<br />eg:nullpointer exception, string.length() -&gt; throws nullpointer if string is null.</p></blockquote>",
            "url": "http://localhost:4000/2023/08/03/java-concepts",
            
            
            
            
            
            "date_published": "2023-08-03T00:00:00+05:30",
            "date_modified": "2023-08-03T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/07/26/find-leaves-of-tree",
            "title": "Find Leaves of Trees - Google interview question.",
            "summary": null,
            "content_text": "Google interview question, let’s goooooProblem Statement.So given a tree, continue the following process until tree is empty. Print out leaves for the wtree &amp; Remove the leaves.For example the given tree        1     /     \\    2       5  /  \\ 3    4So for the first level, nodes (3), (4) &amp; (5). Followed by (2). Then (1)Output: [[3,4,5],[2],[1]]Approach - it's finding out the maximum height of a node.3,4,5 have height of 0.2 has height of 1.1 has height 2.Codepublic ArrayList&lt;ArrayList&lt;Integer&gt;&gt; findLeaves(@NotNull TreeNode node) {    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();    heightTraversal(node, list);    return list;}//height traversal.public int heightTraversal(@Nullable TreeNode node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list) {    if (node == null) {        return 0;    }    int left = heightTraversal(node.left, list);    int right = heightTraversal(node.right, list); //traversing to find the height.    int height = Integer.max(left, right);    insertIntoList(list, height, node.val);    return height + 1;}//simple insert into a 2-d arraylist.private void insertIntoList(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, int height, int val) {    if (list.size() &lt;= height) {        for (int i = 0; i &lt;= (height - list.size()); i++) {            list.add(new ArrayList&lt;&gt;());        }    }    list.get(height).add(val);}public static void main(String[] args) {    SerializeDeserialize sd = new SerializeDeserialize();    Integer[] treeStructure = {1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1};    TreeNode root = sd.createTreeFromArray(treeStructure);    FindLeavesOfTree fl = new FindLeavesOfTree();    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, 2, 3, -1, -1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);} ```",
            "content_html": "<h3 id=\"google-interview-question-lets-gooooo\">Google interview question, let’s gooooo</h3><p>Problem Statement.So given a tree, continue the following process until tree is empty. Print out leaves for the wtree &amp; Remove the leaves.</p><p>For example the given tree</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>        1     /     \\    2       5  /  \\ 3    4</code></pre></div></div><p>So for the first level, nodes (3), (4) &amp; (5). Followed by (2). Then (1)</p><p>Output: [[3,4,5],[2],[1]]</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Approach - it's finding out the maximum height of a node.3,4,5 have height of 0.2 has height of 1.1 has height 2.</code></pre></div></div><h3 id=\"code\">Code</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; findLeaves(@NotNull TreeNode node) {    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();    heightTraversal(node, list);    return list;}</code></pre></div></div><p>//height traversal.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public int heightTraversal(@Nullable TreeNode node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list) {    if (node == null) {        return 0;    }    int left = heightTraversal(node.left, list);    int right = heightTraversal(node.right, list); //traversing to find the height.    int height = Integer.max(left, right);    insertIntoList(list, height, node.val);    return height + 1;}</code></pre></div></div><p>//simple insert into a 2-d arraylist.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>private void insertIntoList(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, int height, int val) {    if (list.size() &lt;= height) {        for (int i = 0; i &lt;= (height - list.size()); i++) {            list.add(new ArrayList&lt;&gt;());        }    }    list.get(height).add(val);}public static void main(String[] args) {    SerializeDeserialize sd = new SerializeDeserialize();    Integer[] treeStructure = {1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1};    TreeNode root = sd.createTreeFromArray(treeStructure);    FindLeavesOfTree fl = new FindLeavesOfTree();    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, 2, 3, -1, -1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);} ```</code></pre></div></div>",
            "url": "http://localhost:4000/2023/07/26/find-leaves-of-tree",
            
            
            
            
            
            "date_published": "2023-07-26T00:00:00+05:30",
            "date_modified": "2023-07-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/07/26/design-patterns",
            "title": "Ubuntu package install",
            "summary": null,
            "content_text": "Observer    - Publisher/Subscriber or observer/client    - change pushed by one, observed by it’s clients/subscribers.Strategy     - different implementation of an interface.Singleton    - when only one implementation of anything is required. (logging, configuration).Template    - look into it.Composite    - look into it.",
            "content_html": "<p>Observer    - Publisher/Subscriber or observer/client    - change pushed by one, observed by it’s clients/subscribers.</p><p>Strategy     - different implementation of an interface.</p><p>Singleton    - when only one implementation of anything is required. (logging, configuration).</p><p>Template    - look into it.</p><p>Composite    - look into it.</p>",
            "url": "http://localhost:4000/2023/07/26/design-patterns",
            
            
            
            
            
            "date_published": "2023-07-26T00:00:00+05:30",
            "date_modified": "2023-07-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/07/22/federer",
            "title": "Federer",
            "summary": null,
            "content_text": "Federer",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=cwnj6mCLv9I\">Federer</a></p>",
            "url": "http://localhost:4000/2023/07/22/federer",
            
            
            
            
            
            "date_published": "2023-07-22T00:00:00+05:30",
            "date_modified": "2023-07-22T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/07/21/system-design-posts",
            "title": "System Design Posts",
            "summary": null,
            "content_text": "DatabaseDatabase-101-Twitch example",
            "content_html": "<h3 id=\"database\">Database</h3><p><a href=\"https://dev.to/danielhe4rt/database-101-twitch-bot-in-a-higher-level-for-beginners-i91\">Database-101-Twitch example</a></p>",
            "url": "http://localhost:4000/2023/07/21/system-design-posts",
            
            
            
            
            
            "date_published": "2023-07-21T00:00:00+05:30",
            "date_modified": "2023-07-21T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/07/21/git-primer",
            "title": "Git Primer.",
            "summary": null,
            "content_text": "Git is a distributed revision control system.Peeling out the distributed layer -&gt; revision control system.control system -&gt; content tracker.    at it’s core -&gt; persistent map.every file has a hash  git hash-object To see contents of a file committed for a commit.  git cat-file -p git cat-file -p d3e2cf226d9bc3c33ededec1aedf03723945d602    All these files had these states during commit.    040000 tree 6e6c53c7c92049cf68858d6efcc37f7698c4d455\tdatabase    040000 tree 75100c61e0410021cbd38768bd63cbb9dc853e84\tgeolocation    040000 tree 77d3d0eecb38b13a448555d00f440fef8e004375\tlogtime .....    Expanding on this , if the same command is carried on just a file (not a folder) it will show the exact contents present during that commit.git cat-file -p b37e5d65cecb6ce2dcda99f691404463bd28447aGit branchesgit puts the branches in the folder .git/refs/headsbranch is just a reference to a commit. Doesn’t mean anything else.  git checkout      &gt;&gt; this points the HEAD to a commit and sends it in a detached HEAD state.  git rebase &amp; git merge - the end goal is the same. rebase copies commits onto the main branch.Complete git guide:    Dev.to link",
            "content_html": "<p>Git is a distributed revision control system.</p><p>Peeling out the distributed layer -&gt; revision control system.</p><p>control system -&gt; content tracker.    at it’s core -&gt; persistent map.</p><p>every file has a hash</p><blockquote>  <p>git hash-object <file-name></file-name></p></blockquote><p>To see contents of a file committed for a commit.</p><blockquote>  <p>git cat-file -p <file-hash-id></file-hash-id></p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git cat-file -p d3e2cf226d9bc3c33ededec1aedf03723945d602    All these files had these states during commit.    040000 tree 6e6c53c7c92049cf68858d6efcc37f7698c4d455\tdatabase    040000 tree 75100c61e0410021cbd38768bd63cbb9dc853e84\tgeolocation    040000 tree 77d3d0eecb38b13a448555d00f440fef8e004375\tlogtime .....    Expanding on this , if the same command is carried on just a file (not a folder) it will show the exact contents present during that commit.git cat-file -p b37e5d65cecb6ce2dcda99f691404463bd28447a</code></pre></div></div><h3 id=\"git-branches\">Git branches</h3><p>git puts the branches in the folder .git/refs/headsbranch is just a reference to a commit. Doesn’t mean anything else.</p><blockquote>  <p>git checkout <branch>     &gt;&gt; this points the HEAD to a commit and sends it in a detached HEAD state.</branch></p></blockquote><blockquote>  <p>git rebase &amp; git merge - the end goal is the same. rebase copies commits onto the main branch.</p></blockquote><p><img src=\"/assets/img/merge_rebase.jpeg\" alt=\"\" /></p><p>Complete git guide:    <a href=\"https://dev.to/opensauced/the-power-of-git-a-guide-to-collaborative-version-control-dl6\">Dev.to link</a></p>",
            "url": "http://localhost:4000/2023/07/21/git-primer",
            "image": "/assets/img/merge_rebase.jpeg",
            
            
            
            
            "date_published": "2023-07-21T00:00:00+05:30",
            "date_modified": "2023-07-21T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/06/09/kafka",
            "title": "Kafka",
            "summary": null,
            "content_text": "KafkaKafka is an events, message streaming platform.MessagesEach message each treated as a byte array.max message size: max.message.bytes = 1MB, batching possible.Message key:value -&gt; key need not be unique, used for partitioning. (Also, key is optional)Each message is timestamped.Each message is stored in topic.Topics  holds messages, (topic used to store similar message, identical structure).  multiple topics supported in per kafka instance.  supports multiple producers and consumers.  supports multiple partitions. Each message is stored in only one partition.Broker  Kafka broker is the central piece between the producer and consumers.  it is a running kafka instance, process executing on the OS.  brokers controller everything, listening, receiving messages &amp; stores.  subscription management. Keep a heartbeat with every consumer.  manage topics, partitions and logs. Takes care of replication of topics across multiple brokers.Multiple kafka brokers form a kafka cluster - any one broker will act as the active controller for the broker. Each partition will have a specific broker as the leader.Logs  managed by kafka brokers.  files are generated according to broker, topic, partition.Producers  Takes care of key identification/generation.  Serialization to bytes upon an agreed contract with the consumer.  Synchronous and asynchronous publishing options to the broker.Consumers  consumers can consume at a later point of time also(streaming/batch)  multiple concurrent consumers per topic.  Topic creation:    /kafka-topics.sh --bootstrap-server localhost:29092 --create --topic &lt;name&gt; --partitions 1 --replication-factor 1    Topic description    ./kafka-topics.sh \\ --bootstrap-server localhost:29092 \\ --list    Producer```./kafka-console-producer.sh \\ –bootstrap-server localhost:29092 \\ –topic kafka.learning.tweets      bootstrap-server &lt;String: server to    REQUIRED unless –broker-list        connect to&gt;                              (deprecated) is specified. The server                                         (s) to connect to. The broker list                                          string in the form HOST1:PORT1,HOST2:                                         PORT2.        topic &lt;String: topic&gt;                  REQUIRED: The topic id to produce                                             messages to.    &gt; Consumer        ./kafka-console-consumer.sh \\ –bootstrap-server localhost:29092 \\ –topic kafka.learning.tweets –from-beginning```  Partitions  Each partition has a leader broker.  leader takes care of replicating the partition.  each message goes to only one partition.Consumer groups - A group of consumers who share a topic workload- Each message goes to only one consumer in a group.- Consumer split the workload through partitions.- Each consumer groups get all the messages from a topic, but the messages are sent to only one consumer in that consumer group.  Consumer offset management.- Number to track message consumption by consumer and partition.- Current offset: last message sent to a given consumer.- Committed offset: last message acknowledged by consumer.- **Resends message on timeout - ensures at least once delivery. (delivery can happen multiple times but will happen atleast once).**Creating two consumers, belonging to the same consumer group: test-consumer-group, the partitions are split - where the deliver message to only one consumer in the consumer group.              Each consumer group receives all the messages from the topic it is subscribed to  Kafka scaling.OverviewResiliency with kafka ?  Storage failure          Replication      Mirroring - data from one cluster to other cluster.        Broker failure          Active controller election      Topic leader election.        Consumer failure          Offset tracking      Partition reassignments.      Kafka Cluster:  group of kafka brokers working together.  each broker has a broker id, each node has a node id.Kafka cluster     - a group of brokers.    - brokers share work based on topic partitions.    - metadata - info about clusters, topics and configurations, current status, consumer &amp; consumer groups.    - each node(broker) has a copy of the cluster metadata.    - nodes in cluster can be either broker, controller or both - only one is the active controller.Kafka controller    - voting mech to choose the active broker.    - active controller writes all metadata to __cluster_metadata topic.    - other brokers and controllers read from this topic and update in-memory copies.  Kafka Replication    - multiple copies of partition logs are maintained - to avoid broker failures.    - unit of replication = partition.     - each partition has multiple replicas, set using replication factor.    - there is a leader replica and follower replica(s).    - leader replica is managed by the leader broker which manages writes reads and storage.    - follower replicas are distributed to brokers, which are not leaders for same partition.    - replication factors &lt;= no. of brokers.  Kafka security    - producer/consumer/broker auth using ssl/sasl     - authorization of read/write operations.Kafka cluster setup.     - a kafka instance runs three types of ports.    - client port is used for external environments, controller port is used for controller communications, internal port is used for communications inside docker environment.  Kafdrop is used as a monitoring tool.Each kafka node can perform two roles: controller &amp; broker.Delivery semantics  At least once          Message can be sent multiple times.      Wait for acknowledgement by the consumer &amp; broker to producer.      Moderate throughput -        At most once.          Acceptable to loose messages.      Duplicates not acceptable.      Fire and forget.        Exactly once.          How is this achieved in kafka ?      ",
            "content_html": "<h1 id=\"kafka\">Kafka</h1><p>Kafka is an events, message streaming platform.</p><h3 id=\"messages\">Messages</h3><p>Each message each treated as a byte array.max message size: max.message.bytes = 1MB, batching possible.Message key:value -&gt; key need not be unique, used for partitioning. (Also, key is optional)Each message is timestamped.Each message is stored in topic.</p><h3 id=\"topics\">Topics</h3><ul>  <li>holds messages, (topic used to store similar message, identical structure).</li>  <li>multiple topics supported in per kafka instance.</li>  <li>supports multiple producers and consumers.</li>  <li>supports multiple partitions. Each message is stored in only one partition.</li></ul><h3 id=\"broker\">Broker</h3><ul>  <li>Kafka broker is the central piece between the producer and consumers.</li>  <li>it is a running kafka instance, process executing on the OS.</li>  <li>brokers controller everything, listening, receiving messages &amp; stores.</li>  <li>subscription management. Keep a heartbeat with every consumer.</li>  <li>manage topics, partitions and logs. Takes care of replication of topics across multiple brokers.</li></ul><p>Multiple kafka brokers form a kafka cluster - any one broker will act as the active controller for the broker. Each partition will have a specific broker as the leader.</p><h3 id=\"logs\">Logs</h3><ul>  <li>managed by kafka brokers.</li>  <li>files are generated according to broker, topic, partition.</li></ul><h3 id=\"producers\">Producers</h3><ul>  <li>Takes care of key identification/generation.</li>  <li>Serialization to bytes upon an agreed contract with the consumer.</li>  <li>Synchronous and asynchronous publishing options to the broker.</li></ul><h3 id=\"consumers\">Consumers</h3><ul>  <li>consumers can consume at a later point of time also(streaming/batch)</li>  <li>multiple concurrent consumers per topic.</li></ul><blockquote>  <p>Topic creation:</p>  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  /kafka-topics.sh --bootstrap-server localhost:29092 --create --topic &lt;name&gt; --partitions 1 --replication-factor 1</code></pre></div>  </div></blockquote><blockquote>  <p>Topic description</p>  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  ./kafka-topics.sh \\ --bootstrap-server localhost:29092 \\ --list</code></pre></div>  </div>  <p>Producer```./kafka-console-producer.sh \\ –bootstrap-server localhost:29092 \\ –topic kafka.learning.tweets</p></blockquote><ul>  <li>    <p>bootstrap-server &lt;String: server to    REQUIRED unless –broker-list        <br />connect to&gt;                              (deprecated) is specified. The server                                         (s) to connect to. The broker list <br />                                         string in the form HOST1:PORT1,HOST2:                                         PORT2.</p>  </li>  <li>    <p>topic &lt;String: topic&gt;                  REQUIRED: The topic id to produce    <br />                                         messages to.</p>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; Consumer</code></pre></div>    </div>    <p>./kafka-console-consumer.sh \\ –bootstrap-server localhost:29092 \\ –topic kafka.learning.tweets –from-beginning```</p>  </li></ul><h3 id=\"partitions\">Partitions</h3><ul>  <li>Each partition has a leader broker.</li>  <li>leader takes care of replicating the partition.</li>  <li>each message goes to only one partition.</li></ul><h3 id=\"consumer-groups---a-group-of-consumers-who-share-a-topic-workload\">Consumer groups - A group of consumers who share a topic workload</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Each message goes to only one consumer in a group.- Consumer split the workload through partitions.- Each consumer groups get all the messages from a topic, but the messages are sent to only one consumer in that consumer group.</code></pre></div></div><ul>  <li><img src=\"/assets/img/consumer-group.png\" alt=\"\" /></li></ul><h3 id=\"consumer-offset-management\">Consumer offset management.</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Number to track message consumption by consumer and partition.- Current offset: last message sent to a given consumer.- Committed offset: last message acknowledged by consumer.- **Resends message on timeout - ensures at least once delivery. (delivery can happen multiple times but will happen atleast once).**</code></pre></div></div><p>Creating two consumers, belonging to the same consumer group: test-consumer-group, the partitions are split - where the deliver message to only one consumer in the consumer group.</p><ul>  <li>    <p><img src=\"/assets/img/consumer-groups-implementation.png\" alt=\"\" /></p>  </li>  <li>    <p>Each consumer group receives all the messages from the topic it is subscribed to</p>  </li></ul><h2 id=\"kafka-scaling\">Kafka scaling.</h2><h3 id=\"overview\">Overview</h3><p>Resiliency with kafka ?</p><ul>  <li>Storage failure    <ul>      <li>Replication</li>      <li>Mirroring - data from one cluster to other cluster.</li>    </ul>  </li>  <li>Broker failure    <ul>      <li>Active controller election</li>      <li>Topic leader election.</li>    </ul>  </li>  <li>Consumer failure    <ul>      <li>Offset tracking</li>      <li>Partition reassignments.</li>    </ul>  </li></ul><h3 id=\"kafka-cluster\">Kafka Cluster:</h3><ul>  <li>group of kafka brokers working together.</li>  <li>each broker has a broker id, each node has a node id.</li></ul><p>Kafka cluster     - a group of brokers.    - brokers share work based on topic partitions.    - metadata - info about clusters, topics and configurations, current status, consumer &amp; consumer groups.    - each node(broker) has a copy of the cluster metadata.    - nodes in cluster can be either broker, controller or both - only one is the active controller.</p><p>Kafka controller    - voting mech to choose the active broker.    - active controller writes all metadata to __cluster_metadata topic.    - other brokers and controllers read from this topic and update in-memory copies.</p><ul>  <li><img src=\"/assets/img/kafka-cluster-controller.png\" alt=\"\" /></li></ul><p>Kafka Replication    - multiple copies of partition logs are maintained - to avoid broker failures.    - unit of replication = partition.     - each partition has multiple replicas, set using replication factor.    - there is a leader replica and follower replica(s).    - leader replica is managed by the leader broker which manages writes reads and storage.    - follower replicas are distributed to brokers, which are not leaders for same partition.    - replication factors &lt;= no. of brokers.</p><ul>  <li><img src=\"/assets/img/replication-in-cluster.png\" alt=\"\" /></li></ul><p>Kafka security    - producer/consumer/broker auth using ssl/sasl     - authorization of read/write operations.</p><p>Kafka cluster setup.     - a kafka instance runs three types of ports.    - client port is used for external environments, controller port is used for controller communications, internal port is used for communications inside docker environment.</p><ul>  <li>Kafdrop is used as a monitoring tool.</li></ul><p>Each kafka node can perform two roles: controller &amp; broker.</p><p>Delivery semantics</p><ul>  <li>At least once    <ul>      <li>Message can be sent multiple times.</li>      <li>Wait for acknowledgement by the consumer &amp; broker to producer.</li>      <li>Moderate throughput -</li>    </ul>  </li>  <li>At most once.    <ul>      <li>Acceptable to loose messages.</li>      <li>Duplicates not acceptable.</li>      <li>Fire and forget.</li>    </ul>  </li>  <li>Exactly once.    <ul>      <li>How is this achieved in kafka ?</li>    </ul>  </li></ul>",
            "url": "http://localhost:4000/2023/06/09/kafka",
            "image": "/assets/img/consumer-group.png",
            
            
            
            
            "date_published": "2023-06-09T00:00:00+05:30",
            "date_modified": "2023-06-09T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/05/08/linkedlist-primer",
            "title": "Linkedlist Primer",
            "summary": null,
            "content_text": "Doubly Linked List.  Advantages over singly linked list -&gt; insert delete operations performed in O(1) time.Disadvantages: extra memory required for prev pointer.  Applications: LRU Cache.Refer for implementation of doubly linked list",
            "content_html": "<h2 id=\"doubly-linked-list\">Doubly Linked List.</h2><blockquote>  <p>Advantages over singly linked list -&gt; insert delete operations performed in O(1) time.Disadvantages: extra memory required for prev pointer.</p></blockquote><blockquote>  <p>Applications: LRU Cache.</p></blockquote><p><a href=\"https://github.com/kaustubhdeokar/interview-cake/blob/main/neetcode75/linkedlist/DoublyLinkedList.java\">Refer for implementation of doubly linked list</a></p>",
            "url": "http://localhost:4000/2023/05/08/linkedlist-primer",
            
            
            
            
            
            "date_published": "2023-05-08T00:00:00+05:30",
            "date_modified": "2023-05-08T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/04/17/523-continuous-subarray-sum",
            "title": "523 Continuous Subarray Sum",
            "summary": null,
            "content_text": "Question:Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.A good subarray is a subarray where:its length is at least two, andthe sum of the elements of the subarray is a multiple of k.Note that:A subarray is a contiguous part of the array.An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.  Input: nums = [23,2,4,6,7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.Approach:The aim is to find any subarray of atleast length 2, which has the sum divisible by k.  Straight forwards approach is to:By using prefix sum, we could find all possible subarray sums in O(n2)  Another approach is that, for every index we can note down the remainder of the prefix sum.ex: [23,2 ,4, 6 ,7]    prefix sum: [23,25,29,35, 42]     remainders: [5,1,5]  (remainder 5 repeats at index 2. hence we can verify at this point if the length of the subarray is at least 2. and return if true.)Solution:        int len = nums.length;        int[] prefixSum = new int[nums.length];        int sum = 0;        HashMap&lt;Integer, Integer&gt; mapRemainderToIndex = new HashMap&lt;&gt;();        mapRemainderToIndex.put(0,0); //         for(int i=0;i&lt;len;i++){            sum += nums[i];            prefixSum[i] = sum;            int remainder = prefixSum[i]%k;                        if(!mapRemainderToIndex.containsKey(remainder)){                mapRemainderToIndex.put(remainder, i+1); //storing remainder-&gt;index.            }             else if(mapRemainderToIndex.get(remainder)&lt;i){  //previous index if smaller then we have atleast length 2. Hence return true.                return true;            }        }        return false;",
            "content_html": "<p>Question:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.A good subarray is a subarray where:its length is at least two, andthe sum of the elements of the subarray is a multiple of k.Note that:A subarray is a contiguous part of the array.An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.</code></pre></div></div><blockquote>  <p>Input: nums = [23,2,4,6,7], k = 6 <br />Output: true <br />Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.</p></blockquote><p>Approach:</p><p>The aim is to find any subarray of atleast length 2, which has the sum divisible by k.</p><blockquote>  <p>Straight forwards approach is to:By using prefix sum, we could find all possible subarray sums in O(n2)</p></blockquote><blockquote>  <p>Another approach is that, for every index we can note down the remainder of the prefix sum.<br />ex: [23,2 ,4, 6 ,7]<br />    prefix sum: [23,25,29,35, 42]     remainders: [5,1,5]</p></blockquote><blockquote>  <p>(remainder 5 repeats at index 2. hence we can verify at this point if the length of the subarray is at least 2. and return if true.)</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Solution:        int len = nums.length;        int[] prefixSum = new int[nums.length];        int sum = 0;        HashMap&lt;Integer, Integer&gt; mapRemainderToIndex = new HashMap&lt;&gt;();        mapRemainderToIndex.put(0,0); //         for(int i=0;i&lt;len;i++){            sum += nums[i];            prefixSum[i] = sum;            int remainder = prefixSum[i]%k;                        if(!mapRemainderToIndex.containsKey(remainder)){                mapRemainderToIndex.put(remainder, i+1); //storing remainder-&gt;index.            }             else if(mapRemainderToIndex.get(remainder)&lt;i){  //previous index if smaller then we have atleast length 2. Hence return true.                return true;            }        }        return false;</code></pre></div></div>",
            "url": "http://localhost:4000/2023/04/17/523-continuous-subarray-sum",
            
            
            
            
            
            "date_published": "2023-04-17T00:00:00+05:30",
            "date_modified": "2023-04-17T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/03/27/linux-commands",
            "title": "Linux Commands",
            "summary": null,
            "content_text": "&gt; to open `files` in the current path from terminal\t&gt;&gt;\txdg-open .&gt; View entire contents of file\t&gt;&gt; cat &lt;filename&gt; &gt; View line count for file\t&gt;&gt; cat &lt;filename&gt; | wc -lFind&gt; Find file recursively in directories\t&gt;&gt; find . -name \".gitignore\"Grep&gt; To search for a word in a text document &amp; and print EVERY line containing the word.\t\tCommand:\t&gt;\tgrep &lt;text&gt; &lt;filepath/filename&gt;\t&gt;\tgrep for ./Trie.java\t\tCommand:\t&gt; cat &lt;filename&gt; | grep &lt;text&gt;\t&gt; cat Trie.java | grep for\t\tOutput:\t\tfor (int i = 0; i &lt; word.length(); i++) {\t    for (int i = 0; i &lt; word.length(); i++) {    \tfor (int i = 0; i &lt; word.length(); i++) {        for (char c : set) {    \tfor (int i = 0; i &lt; prefix.length(); i++) {&gt; To search for a word in a text document &amp; and print EVERY line NOT containing the word.\t&gt; cat &lt;filename&gt; | grep -v &lt;text&gt;\t&gt; cat Trie.java | grep -v for&gt; Print line numbers along with output (-n)\tgrep -n &lt;text&gt; &lt;filepath/filename&gt;&gt; Count (-c)\tgrep -c &lt;text&gt; &lt;filepath/filename&gt;&gt; Case insensitive (-i)\tgrep -i &lt;text&gt; &lt;filepath/filename&gt;",
            "content_html": "<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; to open `files` in the current path from terminal\t&gt;&gt;\txdg-open .&gt; View entire contents of file\t&gt;&gt; cat &lt;filename&gt; &gt; View line count for file\t&gt;&gt; cat &lt;filename&gt; | wc -l</code></pre></div></div><p>Find</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; Find file recursively in directories\t&gt;&gt; find . -name \".gitignore\"</code></pre></div></div><p>Grep</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; To search for a word in a text document &amp; and print EVERY line containing the word.\t\tCommand:\t&gt;\tgrep &lt;text&gt; &lt;filepath/filename&gt;\t&gt;\tgrep for ./Trie.java\t\tCommand:\t&gt; cat &lt;filename&gt; | grep &lt;text&gt;\t&gt; cat Trie.java | grep for\t\tOutput:\t\tfor (int i = 0; i &lt; word.length(); i++) {\t    for (int i = 0; i &lt; word.length(); i++) {    \tfor (int i = 0; i &lt; word.length(); i++) {        for (char c : set) {    \tfor (int i = 0; i &lt; prefix.length(); i++) {&gt; To search for a word in a text document &amp; and print EVERY line NOT containing the word.\t&gt; cat &lt;filename&gt; | grep -v &lt;text&gt;\t&gt; cat Trie.java | grep -v for&gt; Print line numbers along with output (-n)\tgrep -n &lt;text&gt; &lt;filepath/filename&gt;&gt; Count (-c)\tgrep -c &lt;text&gt; &lt;filepath/filename&gt;&gt; Case insensitive (-i)\tgrep -i &lt;text&gt; &lt;filepath/filename&gt;</code></pre></div></div>",
            "url": "http://localhost:4000/2023/03/27/linux-commands",
            
            
            
            
            
            "date_published": "2023-03-27T00:00:00+05:30",
            "date_modified": "2023-03-27T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/02/26/nth-node-from-end-linkedlist",
            "title": "Delete Nth Node From End Linkedlist",
            "summary": null,
            "content_text": "IntuitionMaintain a pointer to the previous node of the node we want to  replace.Approach  If we have the pointer to the prev node of the target node we want to replace: than simple prev.next = target.next;    example: n = 21   -&gt;  2 -&gt;    3 -&gt;    4   -&gt;  5           prev    target            When n = size of the list, the previous pointer will be null, hence in that case answer will be target.next    example: n = 51     -&gt;   2  -&gt;    3 -&gt;    4   -&gt;  5target         prev=null;           Complexity      Time complexity:  O(n) one pass solution.        Space complexity:O(1) constant extra space for some pointers.  Code/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */class Solution {    public ListNode removeNthFromEnd(ListNode head, int n) {                ListNode resultPtr = head;        ListNode prev = head;        ListNode nthNode = head;        ListNode nthNodePrev = null;        int i=0;        while(prev!=null){            prev = prev.next;            if(i&gt;=n){                nthNodePrev = nthNode;                nthNode = nthNode.next;            }             i+=1;        }        if(nthNodePrev != null) {            nthNodePrev.next = nthNode.next;            //System.out.println(\"nthnodeprev:\"+nthNodePrev.val);        }                else if(nthNodePrev == null &amp;&amp; nthNode!=null) {            //System.out.println(\"nthNode:\"+nthNode.val);            return nthNode.next;        }        //System.out.println(nthNode.val);        return resultPtr;    }}",
            "content_html": "<h1 id=\"intuition\">Intuition</h1><p>Maintain a pointer to the previous node of the node we want to  replace.</p><h1 id=\"approach\">Approach</h1><ol>  <li>If we have the pointer to the prev node of the target node we want to replace: than simple prev.next = target.next;    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>example: n = 21   -&gt;  2 -&gt;    3 -&gt;    4   -&gt;  5           prev    target    </code></pre></div>    </div>  </li>  <li>When n = size of the list, the previous pointer will be null, hence in that case answer will be <b>target.next</b>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>example: n = 51     -&gt;   2  -&gt;    3 -&gt;    4   -&gt;  5target         prev=null;     </code></pre></div>    </div>  </li></ol><h1 id=\"complexity\">Complexity</h1><ul>  <li>    <p>Time complexity:  O(n) one pass solution.</p>  </li>  <li>    <p>Space complexity:O(1) constant extra space for some pointers.</p>  </li></ul><h1 id=\"code\">Code</h1><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */class Solution {    public ListNode removeNthFromEnd(ListNode head, int n) {                ListNode resultPtr = head;        ListNode prev = head;        ListNode nthNode = head;        ListNode nthNodePrev = null;        int i=0;        while(prev!=null){            prev = prev.next;            if(i&gt;=n){                nthNodePrev = nthNode;                nthNode = nthNode.next;            }             i+=1;        }        if(nthNodePrev != null) {            nthNodePrev.next = nthNode.next;            //System.out.println(\"nthnodeprev:\"+nthNodePrev.val);        }                else if(nthNodePrev == null &amp;&amp; nthNode!=null) {            //System.out.println(\"nthNode:\"+nthNode.val);            return nthNode.next;        }        //System.out.println(nthNode.val);        return resultPtr;    }}</code></pre></div></div>",
            "url": "http://localhost:4000/2023/02/26/nth-node-from-end-linkedlist",
            
            
            
            
            
            "date_published": "2023-02-26T00:00:00+05:30",
            "date_modified": "2023-02-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/02/24/linux-setup",
            "title": "Ubuntu Linux Setup",
            "summary": null,
            "content_text": "Installing Brave browser    1  sudo apt install curl    2  sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg    3  echo “deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main”|sudo tee /etc/apt/sources.list.d/brave-browser-release.list    4  sudo apt update    5  sudo apt install brave-browser -yInstalling IntelliJInstalling javaDownloading the latest java linux x64 compressed archive. nano .profileJAVA_HOME=/home/kaustubh/Documents/Apps/jdk-17.0.6/export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATHInstalling vscode.python support:\thttps://code.visualstudio.com/docs/python/python-tutorial\tInstalling a .deb file\tsudo apt install ./.deb",
            "content_html": "<p>Installing Brave browser    1  sudo apt install curl    2  sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg    3  echo “deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main”|sudo tee /etc/apt/sources.list.d/brave-browser-release.list    4  sudo apt update    5  sudo apt install brave-browser -y</p><p>Installing IntelliJ</p><p>Installing java</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Downloading the latest java linux x64 compressed archive. nano .profileJAVA_HOME=/home/kaustubh/Documents/Apps/jdk-17.0.6/export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATH</code></pre></div></div><p>Installing vscode.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python support:\thttps://code.visualstudio.com/docs/python/python-tutorial\t</code></pre></div></div><p>Installing a .deb file\tsudo apt install ./<file>.deb</file></p>",
            "url": "http://localhost:4000/2023/02/24/linux-setup",
            
            
            
            
            
            "date_published": "2023-02-24T00:00:00+05:30",
            "date_modified": "2023-02-24T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/02/13/top-k-frequent-elements",
            "title": "Top K Frequent Elements",
            "summary": null,
            "content_text": "Link to problem : https://leetcode.com/problems/top-k-frequent-elements/description/Approach 1:  Hashmap to store count Priority Queue to maintain top k elements.public int[] topKFrequent(int[] arr, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        for (int i : arr) {            if (map.containsKey(i)) {                map.put(i, map.get(i) + 1);            } else {                map.put(i, 1);            }        }                Comparator&lt;Integer&gt; comparator = (i1, i2) -&gt; Integer.compare(map.get(i1), map.get(i2));        //A bit slow to add n element , with each insertion taking log n time.        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(comparator);        for (int i : map.keySet()) {            queue.add(i);            if(queue.size()&gt;k)                queue.poll();        }                int[] frequentKElems = new int[k];        int idx = 0;        while(!queue.isEmpty()){            frequentKElems[idx++] = queue.poll();        }        return frequentKElems;            }Approach 2  Step 1 remains the same.Creating a 2-d arraylist with length = (max count found in step 1).Inserting elements into 2-d arraylist according to their occurences. Using a reverse iterator to find the top k elements.    public int[] topKFrequent(int[] nums, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        int max = 1;        for(int i:nums){            if(map.get(i)==null){                map.put(i, 1);            }            else{                int val = map.get(i)+1;                map.put(i, val);                max = Integer.max(max, val);            }        }            //(1, 3) (2, 2) (3, 1)        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();        for(int i=0;i&lt;=max;i++){            list.add(new ArrayList&lt;&gt;());        }                //() , (3), (2), (1)        for(Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet()){            int count = entry.getValue();            list.get(count).add(entry.getKey());        }        int[] result = new int[k];        while(k&gt;0){            for(int i=list.size()-1;i&gt;=0;i--){                ArrayList&lt;Integer&gt; innerList = list.get(i);                for(int j=0;j&lt;innerList.size();j++){                    if(k&gt;0) result[--k] = innerList.get(j);                    else break;                }                if(k==0) break;            }        }        return result;    }",
            "content_html": "<p>Link to problem : https://leetcode.com/problems/top-k-frequent-elements/description/</p><p>Approach 1:</p><blockquote>  <p>Hashmap to store count <br />Priority Queue to maintain top k elements.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public int[] topKFrequent(int[] arr, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        for (int i : arr) {            if (map.containsKey(i)) {                map.put(i, map.get(i) + 1);            } else {                map.put(i, 1);            }        }                Comparator&lt;Integer&gt; comparator = (i1, i2) -&gt; Integer.compare(map.get(i1), map.get(i2));        //A bit slow to add n element , with each insertion taking log n time.        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(comparator);        for (int i : map.keySet()) {            queue.add(i);            if(queue.size()&gt;k)                queue.poll();        }                int[] frequentKElems = new int[k];        int idx = 0;        while(!queue.isEmpty()){            frequentKElems[idx++] = queue.poll();        }        return frequentKElems;            }</code></pre></div></div><p>Approach 2</p><blockquote>  <p>Step 1 remains the same.<br />Creating a 2-d arraylist with length = (max count found in step 1).<br />Inserting elements into 2-d arraylist according to their occurences. <br />Using a reverse iterator to find the top k elements.<br /></p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    public int[] topKFrequent(int[] nums, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        int max = 1;        for(int i:nums){            if(map.get(i)==null){                map.put(i, 1);            }            else{                int val = map.get(i)+1;                map.put(i, val);                max = Integer.max(max, val);            }        }            //(1, 3) (2, 2) (3, 1)        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();        for(int i=0;i&lt;=max;i++){            list.add(new ArrayList&lt;&gt;());        }                //() , (3), (2), (1)        for(Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet()){            int count = entry.getValue();            list.get(count).add(entry.getKey());        }        int[] result = new int[k];        while(k&gt;0){            for(int i=list.size()-1;i&gt;=0;i--){                ArrayList&lt;Integer&gt; innerList = list.get(i);                for(int j=0;j&lt;innerList.size();j++){                    if(k&gt;0) result[--k] = innerList.get(j);                    else break;                }                if(k==0) break;            }        }        return result;    }</code></pre></div></div>",
            "url": "http://localhost:4000/2023/02/13/top-k-frequent-elements",
            
            
            
            
            
            "date_published": "2023-02-13T00:00:00+05:30",
            "date_modified": "2023-02-13T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/11/15/ubuntu-package-install",
            "title": "Ubuntu package install",
            "summary": null,
            "content_text": "  Installing a deb package - ran into problems of missing dependencies for such cases we can use gdebi terminal guides us how to install gdebi after that simply install any deb package by sudo gdebi &lt;&gt;.deb ",
            "content_html": "<blockquote>  <p>Installing a deb package - ran into problems of missing dependencies <br />for such cases we can use gdebi <br />terminal guides us how to install gdebi <br />after that simply install any deb package by sudo gdebi &lt;&gt;.deb <br /></p></blockquote>",
            "url": "http://localhost:4000/2022/11/15/ubuntu-package-install",
            
            
            
            
            
            "date_published": "2022-11-15T00:00:00+05:30",
            "date_modified": "2022-11-15T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/11/11/binaryindexedtree",
            "title": "Range Sum Query - Mutable",
            "summary": null,
            "content_text": "To do range sum queries in a better time complexity than O(n^2), we use binary indexed tree. Comparing to the segment trees, this is faster, easier to implement. It can be used almost for all such range query problem except for some which we will see in the segment tree docLeetcode Problem:307. Range Sum Query - MutableQueries are divided into three types - (instantiation, sum &amp; update)[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"][[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]Output[null, 9, null, 8]  Solution using binary indexed tree.The idea of binary indexed tree is that any number can be written as a sum of numbers in 2’s power.Supposed there are 8 elements in an array.We construct the binary indexed tree as [0,n+1] array not using the 0th element.Every index will add to the next i&amp;(-i) index, in range of array length.  i &amp; (-i) is the lowest set bit for the i. For powers of 2 it’s the max bit.[1,2,3,4,5,6,7,8]index 1: 1 -&gt; 2 -&gt; 4 -&gt; 8index 2: 2 -&gt; 4 -&gt; 8index 3: 3 -&gt; 4 -&gt; 8index 4: 4 -&gt; 8index 5: 5 -&gt; 6 -&gt; 8index 6: 6 -&gt; 8index 7: 7 -&gt; 8index 8: 8The code for construction goes as follows:def update_tree(index, limit, val, tree):    index += 1        while(index&lt;=limit):        tree[index] += val        index += index &amp; (-index)    def construct_binary_index_tree(arr):    tree = [0]*(len(arr)+1)    for i in range(0, len(arr)):        update_tree(i, len(arr), arr[i], tree)    self.tree = tree    return treeTo get the sum uptil i, using the same concept of getting the last set bit, (index &amp; (-index))we can find the numbers who have contributed to the ith position, then going down (index &amp; (-index)) until we reach 0.  public static int getSum(int[] bTree, int i){                int index = i+1;        int sum = 0;        while(index&gt;0){            sum+=bTree[index];            index-= (index &amp; (-index));        }        return sum;    }",
            "content_html": "<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>To do range sum queries in a better time complexity than O(n^2), we use binary indexed tree. Comparing to the segment trees, this is faster, easier to implement. It can be used almost for all such range query problem except for some which we will see in the segment tree doc</code></pre></div></div><h3 id=\"leetcode-problem307-range-sum-query---mutable\">Leetcode Problem:307. Range Sum Query - Mutable</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Queries are divided into three types - (instantiation, sum &amp; update)[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"][[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]Output[null, 9, null, 8]</code></pre></div></div><blockquote>  <p>Solution using binary indexed tree.</p></blockquote><p>The idea of binary indexed tree is that any number can be written as a sum of numbers in 2’s power.</p><p>Supposed there are 8 elements in an array.We construct the binary indexed tree as [0,n+1] array not using the 0th element.</p><p>Every index will add to the next i&amp;(-i) index, in range of array length.</p><blockquote>  <p>i &amp; (-i) is the lowest set bit for the i. For powers of 2 it’s the max bit.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[1,2,3,4,5,6,7,8]index 1: 1 -&gt; 2 -&gt; 4 -&gt; 8index 2: 2 -&gt; 4 -&gt; 8index 3: 3 -&gt; 4 -&gt; 8index 4: 4 -&gt; 8index 5: 5 -&gt; 6 -&gt; 8index 6: 6 -&gt; 8index 7: 7 -&gt; 8index 8: 8</code></pre></div></div><p>The code for construction goes as follows:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def update_tree(index, limit, val, tree):    index += 1        while(index&lt;=limit):        tree[index] += val        index += index &amp; (-index)    def construct_binary_index_tree(arr):    tree = [0]*(len(arr)+1)    for i in range(0, len(arr)):        update_tree(i, len(arr), arr[i], tree)    self.tree = tree    return tree</code></pre></div></div><p>To get the sum uptil i, using the same concept of getting the last set bit, (index &amp; (-index))</p><p>we can find the numbers who have contributed to the ith position, then going down (index &amp; (-index)) until we reach 0.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  public static int getSum(int[] bTree, int i){                int index = i+1;        int sum = 0;        while(index&gt;0){            sum+=bTree[index];            index-= (index &amp; (-index));        }        return sum;    }</code></pre></div></div>",
            "url": "http://localhost:4000/2022/11/11/binaryindexedtree",
            
            
            
            
            
            "date_published": "2022-11-11T00:00:00+05:30",
            "date_modified": "2022-11-11T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/08/31/websockets",
            "title": "Websockets",
            "summary": null,
            "content_text": "  2 way connections between client and server which does not rely on multiple http connections.Event driven, messaging architecture.What is WebSocket ?  A layer over TCP.Full duplex (both parties sending data at the same time), stateful connection. Stream of messages sent rather than bytes.HTTP used only for initial handshake.  ws is the web socket protocol, the use of ws protocol requires client &amp; server to be able to support it.sockjs emulates websockets in the sense if the client/server wouldn’t support ws it would use any of the fallback mechanisms available.protocol wss is preferred and should be used over ws. (wss stands for secure web socket) is similar to http &amp; https.STOMP.Simple protocol for asynchronous messaging.Supported by all messaging brokers. (Rabbit MQ, ActiveMQ)Client to Server Commands.  SendSubscribeUnsubscribeServer to client Commands.  MessageErrorReceiptAckNackSo in short, STOMP defines the rules for communication over websockets.Check the STOMP documentation page.STOMP Connect frame has authentication headers.  How does the communication work ?  Pre-configuration      Registering endpoint via java registry.addEndpoint(“/random-address”)    Enabling simple broker on prefix “/topic”    Application destination prefix “/ws”    Controller defines the mapping and SendTo.    Flow   I. Client side       Starting a sockjs connection on the defined endpoint (random-address)    UI action initiates stomp client to make a SEND call to a destination as follows.    II. Server side       The message is received by the controller defined for the appropriate destination    It is then sent to an address to which the client would have already subscribed as follows:    III. Client side       Clients who are subscribed to the specific endpoints, receive the message and display it.  ",
            "content_html": "<blockquote>  <p>2 way connections between client and server which does not rely on multiple http connections.Event driven, messaging architecture.</p></blockquote><p>What is WebSocket ?</p><blockquote>  <p>A layer over TCP.Full duplex (both parties sending data at the same time), stateful connection. Stream of messages sent rather than bytes.HTTP used only for initial handshake.</p></blockquote><blockquote>  <p>ws is the web socket protocol, the use of ws protocol requires client &amp; server to be able to support it.sockjs emulates websockets in the sense if the client/server wouldn’t support ws it would use any of the fallback mechanisms available.<img src=\"/assets/img/fallback.png\" alt=\"\" /></p></blockquote><p>protocol wss is preferred and should be used over ws. (wss stands for secure web socket) is similar to http &amp; https.</p><p>STOMP.</p><p>Simple protocol for asynchronous messaging.Supported by all messaging brokers. (Rabbit MQ, ActiveMQ)</p><p>Client to Server Commands.</p><blockquote>  <p>SendSubscribeUnsubscribe</p></blockquote><p>Server to client Commands.</p><blockquote>  <p>MessageErrorReceiptAckNack</p></blockquote><p>So in short, STOMP defines the rules for communication over websockets.</p><p>Check the STOMP documentation page.</p><p>STOMP Connect frame has authentication headers.</p><blockquote>  <p>How does the communication work ?</p></blockquote><blockquote>  <p>Pre-configuration</p>  <ol>    <li>Registering endpoint via java registry.addEndpoint(“/random-address”)</li>    <li>Enabling simple broker on prefix “/topic”</li>    <li>Application destination prefix “/ws”</li>    <li>Controller defines the mapping and SendTo.</li>  </ol></blockquote><blockquote>  <p>Flow <br /></p></blockquote><blockquote>  <p>I. Client side <br /></p>  <ol>    <li>Starting a sockjs connection on the defined endpoint (random-address)</li>    <li>UI action initiates stomp client to make a SEND call to a destination as follows.<img src=\"/assets/img/websocket-send.png\" alt=\"\" /></li>  </ol></blockquote><blockquote>  <p>II. Server side <br /></p>  <ol>    <li>The message is received by the <strong>controller defined for the appropriate destination</strong></li>    <li>It is then sent to an address to which the client would have already subscribed as follows:<br /></li>  </ol></blockquote><p><img src=\"/assets/img/subscribed.png\" alt=\"\" /></p><blockquote>  <p>III. Client side <br /></p>  <ol>    <li>Clients who are subscribed to the specific endpoints, receive the message and display it.</li>  </ol></blockquote>",
            "url": "http://localhost:4000/2022/08/31/websockets",
            "image": "/assets/img/fallback.png",
            
            
            
            
            "date_published": "2022-08-31T00:00:00+05:30",
            "date_modified": "2022-08-31T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/07/13/job-sequencing",
            "title": "Job Sequencing Problem",
            "summary": null,
            "content_text": "public int maxProfitByJobSequencing(Job arr[], int n) {        Comparator&lt;Job&gt; compareByDeadlineAndProfit = (Job j1, Job j2) -&gt;                Integer.compare(j2.profit, j1.profit);        //arrange the jobs in decreasing order of profit.        PriorityQueue&lt;Job&gt; heap = new PriorityQueue&lt;&gt;(compareByDeadlineAndProfit);        int maxDeadline = Integer.MIN_VALUE;        for(int i=0;i&lt;arr.length;i++){            maxDeadline = Integer.max(maxDeadline, arr[i].deadline);            heap.add(arr[i]);        }        int[] slots = new int[arr.length];        while (!heap.isEmpty()) {            Job job = heap.poll();            for (int i = job.deadline; i &gt;= 0; i--) {                if (slots[i] == 0) {                    slots[i] = job.profit;                    break;                }            }        }        return -1;    }    static class Job {        int id, profit, deadline;        Job(int x, int y, int z) {            this.id = x;            this.deadline = y;            this.profit = z;        }        @Override        public String toString() {            return \"Job{\" +                    \"id=\" + id +                    \", profit=\" + profit +                    \", deadline=\" + deadline +                    '}';        }    }    public static void main(String[] args) {        JobSequencing jobSequencing = new JobSequencing();        Job[] arr = {new Job(1, 4, 20), new Job(2, 1, 10), new Job(3, 1, 40), new Job(4, 1, 30)};        jobSequencing.maxProfitByJobSequencing(arr, 4);    }",
            "content_html": "<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public int maxProfitByJobSequencing(Job arr[], int n) {        Comparator&lt;Job&gt; compareByDeadlineAndProfit = (Job j1, Job j2) -&gt;                Integer.compare(j2.profit, j1.profit);        //arrange the jobs in decreasing order of profit.        PriorityQueue&lt;Job&gt; heap = new PriorityQueue&lt;&gt;(compareByDeadlineAndProfit);        int maxDeadline = Integer.MIN_VALUE;        for(int i=0;i&lt;arr.length;i++){            maxDeadline = Integer.max(maxDeadline, arr[i].deadline);            heap.add(arr[i]);        }        int[] slots = new int[arr.length];        while (!heap.isEmpty()) {            Job job = heap.poll();            for (int i = job.deadline; i &gt;= 0; i--) {                if (slots[i] == 0) {                    slots[i] = job.profit;                    break;                }            }        }        return -1;    }    static class Job {        int id, profit, deadline;        Job(int x, int y, int z) {            this.id = x;            this.deadline = y;            this.profit = z;        }        @Override        public String toString() {            return \"Job{\" +                    \"id=\" + id +                    \", profit=\" + profit +                    \", deadline=\" + deadline +                    '}';        }    }    public static void main(String[] args) {        JobSequencing jobSequencing = new JobSequencing();        Job[] arr = {new Job(1, 4, 20), new Job(2, 1, 10), new Job(3, 1, 40), new Job(4, 1, 30)};        jobSequencing.maxProfitByJobSequencing(arr, 4);    }</code></pre></div></div>",
            "url": "http://localhost:4000/2022/07/13/job-sequencing",
            
            
            
            
            
            "date_published": "2022-07-13T00:00:00+05:30",
            "date_modified": "2022-07-13T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/06/12/spring-security",
            "title": "Spring Security",
            "summary": null,
            "content_text": "Spring security,Follows a structure:        Any request that comes does not go directly to the controller, it follows some steps:    First step, it goes through a filter (UsernamePasswordAuthenticationFilter by default).          verifies if the user credentials are correct. (Authentication happens here).      it returns an object of class Authentication.        The Authentication Manager implements a method authenticate which takes in the above object and passes to an implementation of the Authentication Provider (like DaoAuthenticationProvider)      The Authentication Manager figures out who all are the authentication providers available. By default the authentication manager is the ProviderManager.      @Autowired  @Bean public AuthenticationManager authenticationManager(UserDetailsService userDetailsService){       DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();       daoAuthenticationProvider.setUserDetailsService(userDetailsService);       return new ProviderManager(daoAuthenticationProvider);  }            The authentication provider then requests the implementation of User Details Service to return the actual user.    // Custom implementation of UserDetailsService -&gt; (extending InMemoryUserDetailsManager)  @Bean  public UserDetailsService userDetailsService(){      Collection&lt;GrantedAuthority&gt; grantedAuthority = Collections.emptyList();      User user1 = new User(\"user1\", getPasswordEncoder().encode(\"password1\"), true,              true, true, true, grantedAuthority);      User user2 = new User(\"user2\", getPasswordEncoder().encode(\"password1\"), true,              true, true, true, grantedAuthority);      return new InMemoryUserDetailsManager(List.of(user1, user2));  }      Once a security filter chain is defined, we cannot access the login page from postman or browser as the csrf check fails.By default when the spring-security is included in class path, basic authentication and CSRF protection is enabled.Server generates a Session ID and sends it to the client in the form of a JSESSIONID cookie. CSRF protection -&gt; a different token on top of the session id. csrf tokens are included in all request parameters for state changing operation.AuthenticationEntryPoint  to handle unauthorized access.      In the context of a JWT-based authentication system, the JwtAuthenticationEntryPoint class would implement AuthenticationEntryPoint to return a 401 Unauthorized response when a request without a valid JWT token is made to a secured endpoint.    JWT      https://github.com/jwtk/jjwt#js-repo-pjax-container    Creation of jwt: generateToken -      add claims like issuer, subject, expiration, issued at (time) and sign it with secret key.    private static SecretKey getSecretKey() {  byte[] decodedKey = Base64.getDecoder().decode(jwtSecret); //jwtSecret -&gt; injected at runtime.  return new SecretKeySpec(decodedKey, 0, decodedKey.length, \"HmacSHA256\");}public String generateToken(String name) {  String token = Jwts.builder()          .subject(name)          .issuedAt(new Date())          .expiration(expireDate)          .signWith(getSecretKey())          .compact();  System.out.println(\"New token :\"+ token);  return token;}        decrypting jwt.           Jwts.parser()      .verifyWith(getSecretKey())      .build()      .parseSignedClaims(token);        To extract claims: just adding getPayload()       Claims claims = Jwts.parser()              .verifyWith(getSecretKey())              .build()              .parseSignedClaims(token)              .getPayload();        All added claims will be retrieved (username-&gt;subject)  ",
            "content_html": "<p>Spring security,</p><p>Follows a structure:</p><ul>  <li><img src=\"/assets/img/spring-auth.png\" alt=\"\" /></li>  <li>    <p>Any request that comes does not go directly to the controller, it follows some steps:</p>  </li>  <li>First step, it goes through a filter (UsernamePasswordAuthenticationFilter by default).    <ul>      <li>verifies if the user credentials are correct. (Authentication happens here).</li>      <li>it returns an object of class Authentication.</li>    </ul>  </li>  <li>The Authentication Manager implements a method authenticate which takes in the above object and passes to an implementation of the Authentication Provider (like DaoAuthenticationProvider)</li>  <li>    <p>The Authentication Manager figures out who all are the authentication providers available. By default the authentication manager is the ProviderManager.</p>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  @Autowired  @Bean public AuthenticationManager authenticationManager(UserDetailsService userDetailsService){       DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();       daoAuthenticationProvider.setUserDetailsService(userDetailsService);       return new ProviderManager(daoAuthenticationProvider);  }</code></pre></div>    </div>  </li>  <li>    <p>The authentication provider then requests the implementation of User Details Service to return the actual user.</p>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Custom implementation of UserDetailsService -&gt; (extending InMemoryUserDetailsManager)  @Bean  public UserDetailsService userDetailsService(){      Collection&lt;GrantedAuthority&gt; grantedAuthority = Collections.emptyList();      User user1 = new User(\"user1\", getPasswordEncoder().encode(\"password1\"), true,              true, true, true, grantedAuthority);      User user2 = new User(\"user2\", getPasswordEncoder().encode(\"password1\"), true,              true, true, true, grantedAuthority);      return new InMemoryUserDetailsManager(List.of(user1, user2));  }</code></pre></div>    </div>  </li></ul><p>Once a security filter chain is defined, we cannot access the login page from postman or browser as the csrf check fails.</p><p>By default when the spring-security is included in class path, basic authentication and CSRF protection is enabled.Server generates a Session ID and sends it to the client in the form of a JSESSIONID cookie. CSRF protection -&gt; a different token on top of the session id. csrf tokens are included in all request parameters for state changing operation.</p><p>AuthenticationEntryPoint</p><ul>  <li>to handle unauthorized access.</li>  <li>    <p>In the context of a JWT-based authentication system, the JwtAuthenticationEntryPoint class would implement AuthenticationEntryPoint to return a 401 Unauthorized response when a request without a valid JWT token is made to a secured endpoint.</p>  </li>  <li>JWT</li>  <li>    <p>https://github.com/jwtk/jjwt#js-repo-pjax-container</p>  </li>  <li>Creation of jwt: generateToken -</li>  <li>    <p>add claims like issuer, subject, expiration, issued at (time) and sign it with secret key.</p>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>private static SecretKey getSecretKey() {  byte[] decodedKey = Base64.getDecoder().decode(jwtSecret); //jwtSecret -&gt; injected at runtime.  return new SecretKeySpec(decodedKey, 0, decodedKey.length, \"HmacSHA256\");}public String generateToken(String name) {  String token = Jwts.builder()          .subject(name)          .issuedAt(new Date())          .expiration(expireDate)          .signWith(getSecretKey())          .compact();  System.out.println(\"New token :\"+ token);  return token;}</code></pre></div>    </div>  </li>  <li>decrypting jwt.    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>       Jwts.parser()      .verifyWith(getSecretKey())      .build()      .parseSignedClaims(token);</code></pre></div>    </div>    <p>To extract claims: just adding getPayload()</p>    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>   Claims claims = Jwts.parser()              .verifyWith(getSecretKey())              .build()              .parseSignedClaims(token)              .getPayload();</code></pre></div>    </div>    <p>All added claims will be retrieved (username-&gt;subject)</p>  </li></ul>",
            "url": "http://localhost:4000/2022/06/12/spring-security",
            "image": "/assets/img/spring-auth.png",
            
            
            
            
            "date_published": "2022-06-12T00:00:00+05:30",
            "date_modified": "2022-06-12T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2021/06/07/stringjoiner",
            "title": "Java String Joiner",
            "summary": null,
            "content_text": "  Using a delimiter of “, “, appending strings will produce the result  one, two, three.    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Can be done similar to a strinbuilder , as add returns the string joiner object.    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Using starting and ending values.    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }  To create a pattern as [one], [two], [three]```@Testpublic void testStringJoinerCreatingSquareBracketPattern() {    StringJoiner stringJoiner = new StringJoiner(\"], [\",\"[\",\"]\");    stringJoiner.add(\"one\");    stringJoiner.add(\"two\");    stringJoiner.add(\"three\");    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }",
            "content_html": "<blockquote>  <p>Using a delimiter of “, “, appending strings will produce the result  one, two, three.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre></div></div><blockquote>  <p>Can be done similar to a strinbuilder , as add returns the string joiner object.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre></div></div><blockquote>  <p>Using starting and ending values.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }</code></pre></div></div><blockquote>  <p>To create a pattern as [one], [two], [three]</p></blockquote><p>```</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@Testpublic void testStringJoinerCreatingSquareBracketPattern() {    StringJoiner stringJoiner = new StringJoiner(\"], [\",\"[\",\"]\");    stringJoiner.add(\"one\");    stringJoiner.add(\"two\");    stringJoiner.add(\"three\");    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }</code></pre></div></div>",
            "url": "http://localhost:4000/2021/06/07/stringjoiner",
            
            
            
            
            
            "date_published": "2021-06-07T00:00:00+05:30",
            "date_modified": "2021-06-07T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/07/07/cplusplus",
            "title": "C++ Makefile.",
            "summary": null,
            "content_text": "source code (sample.c) -&gt; preprocessor converts to -&gt; expanded source code (sample.i)assembler converts to -&gt; assembly code (sample.s)compiler -&gt; object file (sample.o) [MACHINE DEPENDABLE CODE]linker -&gt; links object code with libraries to produce a.out file.preprocessor -&gt; expands the #include &amp; #if def. to convert to expanded source code.sample.cpp     can be converted         1. (a.out) binary executable         2. (.so) shared object/library (.so) (requires passing of -shared flag)        3. (.o) object code (requires passing of -c)        4. (.a) static libary (ar rcs) (One or more .o files (object files inside a ))Structure    libs - dynamic libraries.    bins - binaries.Make - a tool    process’ the makefile and executes intructions inside it.Makefile -     automates the build process.    needs a targetmakefile defines a target clean which is not actually present. Hence this is called a phony target.Makefile may have multiple target.make file’s default target is it first defined target.Use .DEFAULT_GOAL to override it.  makefile```all: make_dir create_filesmake_dir:        mkdir -p d1 d2 d3create_files:        touch f1.c f2.c f3.cclear:        -rm .c        rm -rf d```",
            "content_html": "<p>source code (sample.c) -&gt; preprocessor converts to -&gt; expanded source code (sample.i)assembler converts to -&gt; assembly code (sample.s)compiler -&gt; object file (sample.o) [MACHINE DEPENDABLE CODE]linker -&gt; links object code with libraries to produce a.out file.</p><p>preprocessor -&gt; expands the #include &amp; #if def. to convert to expanded source code.</p><p>sample.cpp     can be converted         1. (a.out) binary executable         2. (.so) shared object/library (.so) (requires passing of -shared flag)        3. (.o) object code (requires passing of -c)        4. (.a) static libary (ar rcs) (One or more .o files (object files inside a ))</p><p>Structure    libs - dynamic libraries.    bins - binaries.</p><p>Make - a tool    process’ the makefile and executes intructions inside it.</p><p>Makefile -     automates the build process.    needs a target</p><p>makefile defines a target clean which is not actually present. Hence this is called a phony target.</p><p>Makefile may have multiple target.make file’s default target is it first defined target.Use .DEFAULT_GOAL to override it.</p><blockquote>  <p>makefile```all: make_dir create_files</p></blockquote><p>make_dir:        mkdir -p d1 d2 d3</p><p>create_files:        touch f1.c f2.c f3.c</p><p>clear:        -rm <em>.c        rm -rf d</em>```</p>",
            "url": "http://localhost:4000/2019/07/07/cplusplus",
            
            
            
            
            
            "date_published": "2019-07-07T00:00:00+05:30",
            "date_modified": "2019-07-07T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}