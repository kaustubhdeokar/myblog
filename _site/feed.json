{
    "version": "https://jsonfeed.org/version/1",
    "title": "Kaustubh Deokar",
    "home_page_url": "http://localhost:4000/myblog/",
    "feed_url": "http://localhost:4000/myblog/feed.json",
    "description": "Portfolio blog",
    "icon": "http://localhost:4000/myblog/apple-touch-icon.png",
    "favicon": "http://localhost:4000/myblog/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/myblog/2023/08/31/websockets",
            "title": "Websockets",
            "summary": null,
            "content_text": "  2 way connections between client and server which does not rely on multiple http connections.Event driven, messaging architecture.What is WebSocket ?  A layer over TCP.Full duplex (both parties sending data at the same time), stateful connection. Stream of messages sent rather than bytes.HTTP used only for initial handshake.  ws is the web socket protocol, the use of ws protocol requires client &amp; server to be able to support it.sockjs emulates websockets in the sense if the client/server wouldn’t support ws it would use any of the fallback mechanisms available.protocol wss is preferred and should be used over ws. (wss stands for secure web socket) is similar to http &amp; https.STOMP.Simple protocol for asynchronous messaging.Supported by all messaging brokers. (Rabbit MQ, ActiveMQ)Client to Server Commands.  SendSubscribeUnsubscribeServer to client Commands.  MessageErrorReceiptAckNackSo in short, STOMP defines the rules for communication over websockets.Check the STOMP documentation page.STOMP Connect frame has authentication headers.  How does the communication work ?  Pre-configuration      Registering endpoint via java registry.addEndpoint(“/random-address”)    Enabling simple broker on prefix “/topic”    Application destination prefix “/ws”    Controller defines the mapping and SendTo.    Flow   I. Client side       Starting a sockjs connection on the defined endpoint (random-address)    UI action initiates stomp client to make a SEND call to a destination as follows.    II. Server side       The message is received by the controller defined for the appropriate destination    It is then sent to an address to which the client would have already subscribed as follows:    III. Client side       Clients who are subscribed to the specific endpoints, receive the message and display it.  ",
            "content_html": "<blockquote>  <p>2 way connections between client and server which does not rely on multiple http connections.Event driven, messaging architecture.</p></blockquote><p>What is WebSocket ?</p><blockquote>  <p>A layer over TCP.Full duplex (both parties sending data at the same time), stateful connection. Stream of messages sent rather than bytes.HTTP used only for initial handshake.</p></blockquote><blockquote>  <p>ws is the web socket protocol, the use of ws protocol requires client &amp; server to be able to support it.sockjs emulates websockets in the sense if the client/server wouldn’t support ws it would use any of the fallback mechanisms available.<img src=\"/assets/img/fallback.png\" alt=\"fallback options for sockjs\" /></p></blockquote><p>protocol wss is preferred and should be used over ws. (wss stands for secure web socket) is similar to http &amp; https.</p><p>STOMP.</p><p>Simple protocol for asynchronous messaging.Supported by all messaging brokers. (Rabbit MQ, ActiveMQ)</p><p>Client to Server Commands.</p><blockquote>  <p>SendSubscribeUnsubscribe</p></blockquote><p>Server to client Commands.</p><blockquote>  <p>MessageErrorReceiptAckNack</p></blockquote><p>So in short, STOMP defines the rules for communication over websockets.</p><p>Check the STOMP documentation page.</p><p>STOMP Connect frame has authentication headers.</p><blockquote>  <p>How does the communication work ?</p></blockquote><blockquote>  <p>Pre-configuration</p>  <ol>    <li>Registering endpoint via java registry.addEndpoint(“/random-address”)</li>    <li>Enabling simple broker on prefix “/topic”</li>    <li>Application destination prefix “/ws”</li>    <li>Controller defines the mapping and SendTo.</li>  </ol></blockquote><blockquote>  <p>Flow <br /></p></blockquote><blockquote>  <p>I. Client side <br /></p>  <ol>    <li>Starting a sockjs connection on the defined endpoint (random-address)</li>    <li>UI action initiates stomp client to make a SEND call to a destination as follows.<img src=\"/assets/img/fallback.png\" alt=\"websocket-send-call\" /></li>  </ol></blockquote><blockquote>  <p>II. Server side <br /></p>  <ol>    <li>The message is received by the <strong>controller defined for the appropriate destination</strong></li>    <li>It is then sent to an address to which the client would have already subscribed as follows:<br /><img src=\"/assets/img/subscribed.png\" alt=\"subscribed-clients\" /></li>  </ol></blockquote><blockquote>  <p>III. Client side <br /></p>  <ol>    <li>Clients who are subscribed to the specific endpoints, receive the message and display it.</li>  </ol></blockquote>",
            "url": "http://localhost:4000/myblog/2023/08/31/websockets",
            
            
            
            
            
            "date_published": "2023-08-31T00:00:00+05:30",
            "date_modified": "2023-08-31T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/08/31/deepdive-websockets",
            "title": "Deepdive Websockets",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/myblog/2023/08/31/deepdive-websockets",
            
            
            
            
            
            "date_published": "2023-08-31T00:00:00+05:30",
            "date_modified": "2023-08-31T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/08/22/first-open-source-contribution",
            "title": "First Open Source Contribution",
            "summary": null,
            "content_text": "https://github.com/in28minutes/spring-web-services/pull/8#event-10015014094",
            "content_html": "<p>https://github.com/in28minutes/spring-web-services/pull/8#event-10015014094</p>",
            "url": "http://localhost:4000/myblog/2023/08/22/first-open-source-contribution",
            
            
            
            
            
            "date_published": "2023-08-22T00:00:00+05:30",
            "date_modified": "2023-08-22T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/08/03/java-concepts",
            "title": "Exceptions in Java.",
            "summary": null,
            "content_text": "Exceptions  Checked - checked at compile time  eg: filenotfound exception. we need to handle them, the program will fail to compile otherwise.  Unchecked - checked at runtime.eg:nullpointer exception, string.length() -&gt; throws nullpointer if string is null.",
            "content_html": "<h2 id=\"exceptions\">Exceptions</h2><blockquote>  <p>Checked - checked at compile time <br /> eg: filenotfound exception. <br />we need to handle them, the program will fail to compile otherwise.</p></blockquote><blockquote>  <p>Unchecked - checked at runtime.<br />eg:nullpointer exception, string.length() -&gt; throws nullpointer if string is null.</p></blockquote>",
            "url": "http://localhost:4000/myblog/2023/08/03/java-concepts",
            
            
            
            
            
            "date_published": "2023-08-03T00:00:00+05:30",
            "date_modified": "2023-08-03T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/07/26/find-leaves-of-tree",
            "title": "Find Leaves of Trees - Google interview question.",
            "summary": null,
            "content_text": "Google interview question, let’s goooooProblem Statement.So given a tree, continue the following process until tree is empty. Print out leaves for the wtree &amp; Remove the leaves.For example the given tree        1     /     \\    2       5  /  \\ 3    4So for the first level, nodes (3), (4) &amp; (5). Followed by (2). Then (1)Output: [[3,4,5],[2],[1]]Approach - it's finding out the maximum height of a node.3,4,5 have height of 0.2 has height of 1.1 has height 2.Codepublic ArrayList&lt;ArrayList&lt;Integer&gt;&gt; findLeaves(@NotNull TreeNode node) {    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();    heightTraversal(node, list);    return list;}//height traversal.public int heightTraversal(@Nullable TreeNode node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list) {    if (node == null) {        return 0;    }    int left = heightTraversal(node.left, list);    int right = heightTraversal(node.right, list); //traversing to find the height.    int height = Integer.max(left, right);    insertIntoList(list, height, node.val);    return height + 1;}//simple insert into a 2-d arraylist.private void insertIntoList(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, int height, int val) {    if (list.size() &lt;= height) {        for (int i = 0; i &lt;= (height - list.size()); i++) {            list.add(new ArrayList&lt;&gt;());        }    }    list.get(height).add(val);}public static void main(String[] args) {    SerializeDeserialize sd = new SerializeDeserialize();    Integer[] treeStructure = {1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1};    TreeNode root = sd.createTreeFromArray(treeStructure);    FindLeavesOfTree fl = new FindLeavesOfTree();    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, 2, 3, -1, -1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);} ```",
            "content_html": "<h3 id=\"google-interview-question-lets-gooooo\">Google interview question, let’s gooooo</h3><p>Problem Statement.So given a tree, continue the following process until tree is empty. Print out leaves for the wtree &amp; Remove the leaves.</p><p>For example the given tree</p><pre><code>        1     /     \\    2       5  /  \\ 3    4</code></pre><p>So for the first level, nodes (3), (4) &amp; (5). Followed by (2). Then (1)</p><p>Output: [[3,4,5],[2],[1]]</p><pre><code>Approach - it's finding out the maximum height of a node.3,4,5 have height of 0.2 has height of 1.1 has height 2.</code></pre><h3 id=\"code\">Code</h3><pre><code>public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; findLeaves(@NotNull TreeNode node) {    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();    heightTraversal(node, list);    return list;}</code></pre><p>//height traversal.</p><pre><code>public int heightTraversal(@Nullable TreeNode node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list) {    if (node == null) {        return 0;    }    int left = heightTraversal(node.left, list);    int right = heightTraversal(node.right, list); //traversing to find the height.    int height = Integer.max(left, right);    insertIntoList(list, height, node.val);    return height + 1;}</code></pre><p>//simple insert into a 2-d arraylist.</p><pre><code>private void insertIntoList(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, int height, int val) {    if (list.size() &lt;= height) {        for (int i = 0; i &lt;= (height - list.size()); i++) {            list.add(new ArrayList&lt;&gt;());        }    }    list.get(height).add(val);}public static void main(String[] args) {    SerializeDeserialize sd = new SerializeDeserialize();    Integer[] treeStructure = {1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1};    TreeNode root = sd.createTreeFromArray(treeStructure);    FindLeavesOfTree fl = new FindLeavesOfTree();    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, 2, 3, -1, -1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);    treeStructure = new Integer[]{1, -1, -1};    root = sd.createTreeFromArray(treeStructure);    fl = new FindLeavesOfTree();    leaves = fl.findLeaves(root);    System.out.println(leaves);} ```</code></pre>",
            "url": "http://localhost:4000/myblog/2023/07/26/find-leaves-of-tree",
            
            
            
            
            
            "date_published": "2023-07-26T00:00:00+05:30",
            "date_modified": "2023-07-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/07/26/design-patterns",
            "title": "Ubuntu package install",
            "summary": null,
            "content_text": "Observer    - Publisher/Subscriber or observer/client    - change pushed by one, observed by it’s clients/subscribers.Strategy     - different implementation of an interface.Singleton    - when only one implementation of anything is required. (logging, configuration).Template    - look into it.",
            "content_html": "<p>Observer    - Publisher/Subscriber or observer/client    - change pushed by one, observed by it’s clients/subscribers.</p><p>Strategy     - different implementation of an interface.</p><p>Singleton    - when only one implementation of anything is required. (logging, configuration).</p><p>Template    - look into it.</p>",
            "url": "http://localhost:4000/myblog/2023/07/26/design-patterns",
            
            
            
            
            
            "date_published": "2023-07-26T00:00:00+05:30",
            "date_modified": "2023-07-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/07/22/federer",
            "title": "Federer",
            "summary": null,
            "content_text": "Federer",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=cwnj6mCLv9I\">Federer</a></p>",
            "url": "http://localhost:4000/myblog/2023/07/22/federer",
            
            
            
            
            
            "date_published": "2023-07-22T00:00:00+05:30",
            "date_modified": "2023-07-22T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/07/21/useful-git-posts",
            "title": "Useful Git Posts",
            "summary": null,
            "content_text": "Complete git guide:    Dev.to link",
            "content_html": "<p>Complete git guide:    <a href=\"https://dev.to/opensauced/the-power-of-git-a-guide-to-collaborative-version-control-dl6\">Dev.to link</a></p>",
            "url": "http://localhost:4000/myblog/2023/07/21/useful-git-posts",
            
            
            
            
            
            "date_published": "2023-07-21T00:00:00+05:30",
            "date_modified": "2023-07-21T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/07/21/system-design-posts",
            "title": "System Design Posts",
            "summary": null,
            "content_text": "DatabaseDatabase-101-Twitch example",
            "content_html": "<h3 id=\"database\">Database</h3><p><a href=\"https://dev.to/danielhe4rt/database-101-twitch-bot-in-a-higher-level-for-beginners-i91\">Database-101-Twitch example</a></p>",
            "url": "http://localhost:4000/myblog/2023/07/21/system-design-posts",
            
            
            
            
            
            "date_published": "2023-07-21T00:00:00+05:30",
            "date_modified": "2023-07-21T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/05/08/linkedlist-primer",
            "title": "Linkedlist Primer",
            "summary": null,
            "content_text": "Doubly Linked List.  Advantages over singly linked list -&gt; insert delete operations performed in O(1) time.Disadvantages: extra memory required for prev pointer.  Applications: LRU Cache.Refer for implementation of doubly linked list",
            "content_html": "<h2 id=\"doubly-linked-list\">Doubly Linked List.</h2><blockquote>  <p>Advantages over singly linked list -&gt; insert delete operations performed in O(1) time.Disadvantages: extra memory required for prev pointer.</p></blockquote><blockquote>  <p>Applications: LRU Cache.</p></blockquote><p><a href=\"https://github.com/kaustubhdeokar/interview-cake/blob/main/neetcode75/linkedlist/DoublyLinkedList.java\">Refer for implementation of doubly linked list</a></p>",
            "url": "http://localhost:4000/myblog/2023/05/08/linkedlist-primer",
            
            
            
            
            
            "date_published": "2023-05-08T00:00:00+05:30",
            "date_modified": "2023-05-08T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/04/17/523-continuous-subarray-sum",
            "title": "523 Continuous Subarray Sum",
            "summary": null,
            "content_text": "Question:Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.A good subarray is a subarray where:its length is at least two, andthe sum of the elements of the subarray is a multiple of k.Note that:A subarray is a contiguous part of the array.An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.  Input: nums = [23,2,4,6,7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.Approach:The aim is to find any subarray of atleast length 2, which has the sum divisible by k.  Straight forwards approach is to:By using prefix sum, we could find all possible subarray sums in O(n2)  Another approach is that, for every index we can note down the remainder of the prefix sum.ex: [23,2 ,4, 6 ,7]    prefix sum: [23,25,29,35, 42]     remainders: [5,1,5]  (remainder 5 repeats at index 2. hence we can verify at this point if the length of the subarray is at least 2. and return if true.)Solution:        int len = nums.length;        int[] prefixSum = new int[nums.length];        int sum = 0;        HashMap&lt;Integer, Integer&gt; mapRemainderToIndex = new HashMap&lt;&gt;();        mapRemainderToIndex.put(0,0); //         for(int i=0;i&lt;len;i++){            sum += nums[i];            prefixSum[i] = sum;            int remainder = prefixSum[i]%k;                        if(!mapRemainderToIndex.containsKey(remainder)){                mapRemainderToIndex.put(remainder, i+1); //storing remainder-&gt;index.            }             else if(mapRemainderToIndex.get(remainder)&lt;i){  //previous index if smaller then we have atleast length 2. Hence return true.                return true;            }        }        return false;",
            "content_html": "<p>Question:</p><pre><code>Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.A good subarray is a subarray where:its length is at least two, andthe sum of the elements of the subarray is a multiple of k.Note that:A subarray is a contiguous part of the array.An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.</code></pre><blockquote>  <p>Input: nums = [23,2,4,6,7], k = 6 <br />Output: true <br />Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.</p></blockquote><p>Approach:</p><p>The aim is to find any subarray of atleast length 2, which has the sum divisible by k.</p><blockquote>  <p>Straight forwards approach is to:By using prefix sum, we could find all possible subarray sums in O(n2)</p></blockquote><blockquote>  <p>Another approach is that, for every index we can note down the remainder of the prefix sum.<br />ex: [23,2 ,4, 6 ,7]<br />    prefix sum: [23,25,29,35, 42]     remainders: [5,1,5]</p></blockquote><blockquote>  <p>(remainder 5 repeats at index 2. hence we can verify at this point if the length of the subarray is at least 2. and return if true.)</p></blockquote><pre><code>Solution:        int len = nums.length;        int[] prefixSum = new int[nums.length];        int sum = 0;        HashMap&lt;Integer, Integer&gt; mapRemainderToIndex = new HashMap&lt;&gt;();        mapRemainderToIndex.put(0,0); //         for(int i=0;i&lt;len;i++){            sum += nums[i];            prefixSum[i] = sum;            int remainder = prefixSum[i]%k;                        if(!mapRemainderToIndex.containsKey(remainder)){                mapRemainderToIndex.put(remainder, i+1); //storing remainder-&gt;index.            }             else if(mapRemainderToIndex.get(remainder)&lt;i){  //previous index if smaller then we have atleast length 2. Hence return true.                return true;            }        }        return false;</code></pre>",
            "url": "http://localhost:4000/myblog/2023/04/17/523-continuous-subarray-sum",
            
            
            
            
            
            "date_published": "2023-04-17T00:00:00+05:30",
            "date_modified": "2023-04-17T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/03/27/linux-commands",
            "title": "Linux Commands",
            "summary": null,
            "content_text": "&gt; to open `files` in the current path from terminal\t&gt;&gt;\txdg-open .&gt; View entire contents of file\t&gt;&gt; cat &lt;filename&gt; &gt; View line count for file\t&gt;&gt; cat &lt;filename&gt; | wc -lFind&gt; Find file recursively in directories\t&gt;&gt; find . -name \".gitignore\"Grep&gt; To search for a word in a text document &amp; and print EVERY line containing the word.\t\tCommand:\t&gt;\tgrep &lt;text&gt; &lt;filepath/filename&gt;\t&gt;\tgrep for ./Trie.java\t\tCommand:\t&gt; cat &lt;filename&gt; | grep &lt;text&gt;\t&gt; cat Trie.java | grep for\t\tOutput:\t\tfor (int i = 0; i &lt; word.length(); i++) {\t    for (int i = 0; i &lt; word.length(); i++) {    \tfor (int i = 0; i &lt; word.length(); i++) {        for (char c : set) {    \tfor (int i = 0; i &lt; prefix.length(); i++) {&gt; To search for a word in a text document &amp; and print EVERY line NOT containing the word.\t&gt; cat &lt;filename&gt; | grep -v &lt;text&gt;\t&gt; cat Trie.java | grep -v for&gt; Print line numbers along with output (-n)\tgrep -n &lt;text&gt; &lt;filepath/filename&gt;&gt; Count (-c)\tgrep -c &lt;text&gt; &lt;filepath/filename&gt;&gt; Case insensitive (-i)\tgrep -i &lt;text&gt; &lt;filepath/filename&gt;",
            "content_html": "<pre><code>&gt; to open `files` in the current path from terminal\t&gt;&gt;\txdg-open .&gt; View entire contents of file\t&gt;&gt; cat &lt;filename&gt; &gt; View line count for file\t&gt;&gt; cat &lt;filename&gt; | wc -l</code></pre><p>Find</p><pre><code>&gt; Find file recursively in directories\t&gt;&gt; find . -name \".gitignore\"</code></pre><p>Grep</p><pre><code>&gt; To search for a word in a text document &amp; and print EVERY line containing the word.\t\tCommand:\t&gt;\tgrep &lt;text&gt; &lt;filepath/filename&gt;\t&gt;\tgrep for ./Trie.java\t\tCommand:\t&gt; cat &lt;filename&gt; | grep &lt;text&gt;\t&gt; cat Trie.java | grep for\t\tOutput:\t\tfor (int i = 0; i &lt; word.length(); i++) {\t    for (int i = 0; i &lt; word.length(); i++) {    \tfor (int i = 0; i &lt; word.length(); i++) {        for (char c : set) {    \tfor (int i = 0; i &lt; prefix.length(); i++) {&gt; To search for a word in a text document &amp; and print EVERY line NOT containing the word.\t&gt; cat &lt;filename&gt; | grep -v &lt;text&gt;\t&gt; cat Trie.java | grep -v for&gt; Print line numbers along with output (-n)\tgrep -n &lt;text&gt; &lt;filepath/filename&gt;&gt; Count (-c)\tgrep -c &lt;text&gt; &lt;filepath/filename&gt;&gt; Case insensitive (-i)\tgrep -i &lt;text&gt; &lt;filepath/filename&gt;</code></pre>",
            "url": "http://localhost:4000/myblog/2023/03/27/linux-commands",
            
            
            
            
            
            "date_published": "2023-03-27T00:00:00+05:30",
            "date_modified": "2023-03-27T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/02/26/nth-node-from-end-linkedlist",
            "title": "Delete Nth Node From End Linkedlist",
            "summary": null,
            "content_text": "IntuitionMaintain a pointer to the previous node of the node we want to  replace.Approach  If we have the pointer to the prev node of the target node we want to replace: than simple prev.next = target.next;    example: n = 21   -&gt;  2 -&gt;    3 -&gt;    4   -&gt;  5           prev    target        When n = size of the list, the previous pointer will be null, hence in that case answer will be target.next    example: n = 51     -&gt;   2  -&gt;    3 -&gt;    4   -&gt;  5target         prev=null;       Complexity      Time complexity:  O(n) one pass solution.        Space complexity:O(1) constant extra space for some pointers.  Code/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */class Solution {    public ListNode removeNthFromEnd(ListNode head, int n) {                ListNode resultPtr = head;        ListNode prev = head;        ListNode nthNode = head;        ListNode nthNodePrev = null;        int i=0;        while(prev!=null){            prev = prev.next;            if(i&gt;=n){                nthNodePrev = nthNode;                nthNode = nthNode.next;            }             i+=1;        }        if(nthNodePrev != null) {            nthNodePrev.next = nthNode.next;            //System.out.println(\"nthnodeprev:\"+nthNodePrev.val);        }                else if(nthNodePrev == null &amp;&amp; nthNode!=null) {            //System.out.println(\"nthNode:\"+nthNode.val);            return nthNode.next;        }        //System.out.println(nthNode.val);        return resultPtr;    }}",
            "content_html": "<h1 id=\"intuition\">Intuition</h1><p>Maintain a pointer to the previous node of the node we want to  replace.</p><h1 id=\"approach\">Approach</h1><ol>  <li>If we have the pointer to the prev node of the target node we want to replace: than simple prev.next = target.next;    <pre><code>example: n = 21   -&gt;  2 -&gt;    3 -&gt;    4   -&gt;  5           prev    target    </code></pre>  </li>  <li>When n = size of the list, the previous pointer will be null, hence in that case answer will be <b>target.next</b>    <pre><code>example: n = 51     -&gt;   2  -&gt;    3 -&gt;    4   -&gt;  5target         prev=null;     </code></pre>  </li></ol><h1 id=\"complexity\">Complexity</h1><ul>  <li>    <p>Time complexity:  O(n) one pass solution.</p>  </li>  <li>    <p>Space complexity:O(1) constant extra space for some pointers.</p>  </li></ul><h1 id=\"code\">Code</h1><pre><code>/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */class Solution {    public ListNode removeNthFromEnd(ListNode head, int n) {                ListNode resultPtr = head;        ListNode prev = head;        ListNode nthNode = head;        ListNode nthNodePrev = null;        int i=0;        while(prev!=null){            prev = prev.next;            if(i&gt;=n){                nthNodePrev = nthNode;                nthNode = nthNode.next;            }             i+=1;        }        if(nthNodePrev != null) {            nthNodePrev.next = nthNode.next;            //System.out.println(\"nthnodeprev:\"+nthNodePrev.val);        }                else if(nthNodePrev == null &amp;&amp; nthNode!=null) {            //System.out.println(\"nthNode:\"+nthNode.val);            return nthNode.next;        }        //System.out.println(nthNode.val);        return resultPtr;    }}</code></pre>",
            "url": "http://localhost:4000/myblog/2023/02/26/nth-node-from-end-linkedlist",
            
            
            
            
            
            "date_published": "2023-02-26T00:00:00+05:30",
            "date_modified": "2023-02-26T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/02/24/linux-setup",
            "title": "Ubuntu Linux Setup",
            "summary": null,
            "content_text": "Installing Brave browser    1  sudo apt install curl    2  sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg    3  echo “deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main”|sudo tee /etc/apt/sources.list.d/brave-browser-release.list    4  sudo apt update    5  sudo apt install brave-browser -yInstalling IntelliJInstalling javaDownloading the latest java linux x64 compressed archive. nano .profileJAVA_HOME=/home/kaustubh/Documents/Apps/jdk-17.0.6/export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATHInstalling vscode.python support:\thttps://code.visualstudio.com/docs/python/python-tutorial\tInstalling a .deb file\tsudo apt install ./.deb",
            "content_html": "<p>Installing Brave browser    1  sudo apt install curl    2  sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg    3  echo “deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main”|sudo tee /etc/apt/sources.list.d/brave-browser-release.list    4  sudo apt update    5  sudo apt install brave-browser -y</p><p>Installing IntelliJ</p><p>Installing java</p><pre><code>Downloading the latest java linux x64 compressed archive. nano .profileJAVA_HOME=/home/kaustubh/Documents/Apps/jdk-17.0.6/export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATH</code></pre><p>Installing vscode.</p><pre><code>python support:\thttps://code.visualstudio.com/docs/python/python-tutorial\t</code></pre><p>Installing a .deb file\tsudo apt install ./<file>.deb</file></p>",
            "url": "http://localhost:4000/myblog/2023/02/24/linux-setup",
            
            
            
            
            
            "date_published": "2023-02-24T00:00:00+05:30",
            "date_modified": "2023-02-24T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/02/13/top-k-frequent-elements",
            "title": "Top K Frequent Elements",
            "summary": null,
            "content_text": "Link to problem : https://leetcode.com/problems/top-k-frequent-elements/description/Approach 1:  Hashmap to store count Priority Queue to maintain top k elements.public int[] topKFrequent(int[] arr, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        for (int i : arr) {            if (map.containsKey(i)) {                map.put(i, map.get(i) + 1);            } else {                map.put(i, 1);            }        }                Comparator&lt;Integer&gt; comparator = (i1, i2) -&gt; Integer.compare(map.get(i1), map.get(i2));        //A bit slow to add n element , with each insertion taking log n time.        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(comparator);        for (int i : map.keySet()) {            queue.add(i);            if(queue.size()&gt;k)                queue.poll();        }                int[] frequentKElems = new int[k];        int idx = 0;        while(!queue.isEmpty()){            frequentKElems[idx++] = queue.poll();        }        return frequentKElems;            }Approach 2  Step 1 remains the same.Creating a 2-d arraylist with length = (max count found in step 1).Inserting elements into 2-d arraylist according to their occurences. Using a reverse iterator to find the top k elements.    public int[] topKFrequent(int[] nums, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        int max = 1;        for(int i:nums){            if(map.get(i)==null){                map.put(i, 1);            }            else{                int val = map.get(i)+1;                map.put(i, val);                max = Integer.max(max, val);            }        }            //(1, 3) (2, 2) (3, 1)        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();        for(int i=0;i&lt;=max;i++){            list.add(new ArrayList&lt;&gt;());        }                //() , (3), (2), (1)        for(Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet()){            int count = entry.getValue();            list.get(count).add(entry.getKey());        }        int[] result = new int[k];        while(k&gt;0){            for(int i=list.size()-1;i&gt;=0;i--){                ArrayList&lt;Integer&gt; innerList = list.get(i);                for(int j=0;j&lt;innerList.size();j++){                    if(k&gt;0) result[--k] = innerList.get(j);                    else break;                }                if(k==0) break;            }        }        return result;    }",
            "content_html": "<p>Link to problem : https://leetcode.com/problems/top-k-frequent-elements/description/</p><p>Approach 1:</p><blockquote>  <p>Hashmap to store count <br />Priority Queue to maintain top k elements.</p></blockquote><pre><code>public int[] topKFrequent(int[] arr, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        for (int i : arr) {            if (map.containsKey(i)) {                map.put(i, map.get(i) + 1);            } else {                map.put(i, 1);            }        }                Comparator&lt;Integer&gt; comparator = (i1, i2) -&gt; Integer.compare(map.get(i1), map.get(i2));        //A bit slow to add n element , with each insertion taking log n time.        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(comparator);        for (int i : map.keySet()) {            queue.add(i);            if(queue.size()&gt;k)                queue.poll();        }                int[] frequentKElems = new int[k];        int idx = 0;        while(!queue.isEmpty()){            frequentKElems[idx++] = queue.poll();        }        return frequentKElems;            }</code></pre><p>Approach 2</p><blockquote>  <p>Step 1 remains the same.<br />Creating a 2-d arraylist with length = (max count found in step 1).<br />Inserting elements into 2-d arraylist according to their occurences. <br />Using a reverse iterator to find the top k elements.<br /></p></blockquote><pre><code>    public int[] topKFrequent(int[] nums, int k) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        int max = 1;        for(int i:nums){            if(map.get(i)==null){                map.put(i, 1);            }            else{                int val = map.get(i)+1;                map.put(i, val);                max = Integer.max(max, val);            }        }            //(1, 3) (2, 2) (3, 1)        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();        for(int i=0;i&lt;=max;i++){            list.add(new ArrayList&lt;&gt;());        }                //() , (3), (2), (1)        for(Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet()){            int count = entry.getValue();            list.get(count).add(entry.getKey());        }        int[] result = new int[k];        while(k&gt;0){            for(int i=list.size()-1;i&gt;=0;i--){                ArrayList&lt;Integer&gt; innerList = list.get(i);                for(int j=0;j&lt;innerList.size();j++){                    if(k&gt;0) result[--k] = innerList.get(j);                    else break;                }                if(k==0) break;            }        }        return result;    }</code></pre>",
            "url": "http://localhost:4000/myblog/2023/02/13/top-k-frequent-elements",
            
            
            
            
            
            "date_published": "2023-02-13T00:00:00+05:30",
            "date_modified": "2023-02-13T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2023/01/08/spring-auth",
            "title": "Authentication in spring.",
            "summary": null,
            "content_text": "password encoder: BcryptPasswordEncoder.",
            "content_html": "<p>password encoder: BcryptPasswordEncoder.</p>",
            "url": "http://localhost:4000/myblog/2023/01/08/spring-auth",
            
            
            
            
            
            "date_published": "2023-01-08T00:00:00+05:30",
            "date_modified": "2023-01-08T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2022/11/15/ubuntu-package-install",
            "title": "Ubuntu package install",
            "summary": null,
            "content_text": "  Installing a deb package - ran into problems of missing dependencies for such cases we can use gdebi terminal guides us how to install gdebi after that simply install any deb package by sudo gdebi &lt;&gt;.deb ",
            "content_html": "<blockquote>  <p>Installing a deb package - ran into problems of missing dependencies <br />for such cases we can use gdebi <br />terminal guides us how to install gdebi <br />after that simply install any deb package by sudo gdebi &lt;&gt;.deb <br /></p></blockquote>",
            "url": "http://localhost:4000/myblog/2022/11/15/ubuntu-package-install",
            
            
            
            
            
            "date_published": "2022-11-15T00:00:00+05:30",
            "date_modified": "2022-11-15T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2022/11/11/binaryindexedtree",
            "title": "Range Sum Query - Mutable",
            "summary": null,
            "content_text": "To do range sum queries in a better time complexity than O(n^2), we use binary indexed tree. Comparing to the segment trees, this is faster, easier to implement. It can be used almost for all such range query problem except for some which we will see in the segment tree docLeetcode Problem:307. Range Sum Query - MutableQueries are divided into three types - (instantiation, sum &amp; update)[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"][[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]Output[null, 9, null, 8]  Solution using binary indexed tree.The idea of binary indexed tree is that any number can be written as a sum of numbers in 2’s power.Supposed there are 8 elements in an array.We construct the binary indexed tree as [0,n+1] array not using the 0th element.Every index will add to the next i&amp;(-i) index, in range of array length.  i &amp; (-i) is the lowest set bit for the i. For powers of 2 it’s the max bit.[1,2,3,4,5,6,7,8]index 1: 1 -&gt; 2 -&gt; 4 -&gt; 8index 2: 2 -&gt; 4 -&gt; 8index 3: 3 -&gt; 4 -&gt; 8index 4: 4 -&gt; 8index 5: 5 -&gt; 6 -&gt; 8index 6: 6 -&gt; 8index 7: 7 -&gt; 8index 8: 8The code for construction goes as follows:def update_tree(index, limit, val, tree):    index += 1        while(index&lt;=limit):        tree[index] += val        index += index &amp; (-index)    def construct_binary_index_tree(arr):    tree = [0]*(len(arr)+1)    for i in range(0, len(arr)):        update_tree(i, len(arr), arr[i], tree)    self.tree = tree    return treeTo get the sum uptil i, using the same concept of getting the last set bit, (index &amp; (-index))we can find the numbers who have contributed to the ith position, then going down (index &amp; (-index)) until we reach 0.  public static int getSum(int[] bTree, int i){                int index = i+1;        int sum = 0;        while(index&gt;0){            sum+=bTree[index];            index-= (index &amp; (-index));        }        return sum;    }",
            "content_html": "<pre><code>To do range sum queries in a better time complexity than O(n^2), we use binary indexed tree. Comparing to the segment trees, this is faster, easier to implement. It can be used almost for all such range query problem except for some which we will see in the segment tree doc</code></pre><h3 id=\"leetcode-problem307-range-sum-query---mutable\">Leetcode Problem:307. Range Sum Query - Mutable</h3><pre><code>Queries are divided into three types - (instantiation, sum &amp; update)[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"][[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]Output[null, 9, null, 8]</code></pre><blockquote>  <p>Solution using binary indexed tree.</p></blockquote><p>The idea of binary indexed tree is that any number can be written as a sum of numbers in 2’s power.</p><p>Supposed there are 8 elements in an array.We construct the binary indexed tree as [0,n+1] array not using the 0th element.</p><p>Every index will add to the next i&amp;(-i) index, in range of array length.</p><blockquote>  <p>i &amp; (-i) is the lowest set bit for the i. For powers of 2 it’s the max bit.</p></blockquote><pre><code>[1,2,3,4,5,6,7,8]index 1: 1 -&gt; 2 -&gt; 4 -&gt; 8index 2: 2 -&gt; 4 -&gt; 8index 3: 3 -&gt; 4 -&gt; 8index 4: 4 -&gt; 8index 5: 5 -&gt; 6 -&gt; 8index 6: 6 -&gt; 8index 7: 7 -&gt; 8index 8: 8</code></pre><p>The code for construction goes as follows:</p><pre><code>def update_tree(index, limit, val, tree):    index += 1        while(index&lt;=limit):        tree[index] += val        index += index &amp; (-index)    def construct_binary_index_tree(arr):    tree = [0]*(len(arr)+1)    for i in range(0, len(arr)):        update_tree(i, len(arr), arr[i], tree)    self.tree = tree    return tree</code></pre><p>To get the sum uptil i, using the same concept of getting the last set bit, (index &amp; (-index))</p><p>we can find the numbers who have contributed to the ith position, then going down (index &amp; (-index)) until we reach 0.</p><pre><code>  public static int getSum(int[] bTree, int i){                int index = i+1;        int sum = 0;        while(index&gt;0){            sum+=bTree[index];            index-= (index &amp; (-index));        }        return sum;    }</code></pre>",
            "url": "http://localhost:4000/myblog/2022/11/11/binaryindexedtree",
            
            
            
            
            
            "date_published": "2022-11-11T00:00:00+05:30",
            "date_modified": "2022-11-11T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2022/07/13/job-sequencing",
            "title": "Job Sequencing Problem",
            "summary": null,
            "content_text": "public int maxProfitByJobSequencing(Job arr[], int n) {        Comparator&lt;Job&gt; compareByDeadlineAndProfit = (Job j1, Job j2) -&gt;                Integer.compare(j2.profit, j1.profit);        //arrange the jobs in decreasing order of profit.        PriorityQueue&lt;Job&gt; heap = new PriorityQueue&lt;&gt;(compareByDeadlineAndProfit);        int maxDeadline = Integer.MIN_VALUE;        for(int i=0;i&lt;arr.length;i++){            maxDeadline = Integer.max(maxDeadline, arr[i].deadline);            heap.add(arr[i]);        }        int[] slots = new int[arr.length];        while (!heap.isEmpty()) {            Job job = heap.poll();            for (int i = job.deadline; i &gt;= 0; i--) {                if (slots[i] == 0) {                    slots[i] = job.profit;                    break;                }            }        }        return -1;    }    static class Job {        int id, profit, deadline;        Job(int x, int y, int z) {            this.id = x;            this.deadline = y;            this.profit = z;        }        @Override        public String toString() {            return \"Job{\" +                    \"id=\" + id +                    \", profit=\" + profit +                    \", deadline=\" + deadline +                    '}';        }    }    public static void main(String[] args) {        JobSequencing jobSequencing = new JobSequencing();        Job[] arr = {new Job(1, 4, 20), new Job(2, 1, 10), new Job(3, 1, 40), new Job(4, 1, 30)};        jobSequencing.maxProfitByJobSequencing(arr, 4);    }",
            "content_html": "<pre><code>public int maxProfitByJobSequencing(Job arr[], int n) {        Comparator&lt;Job&gt; compareByDeadlineAndProfit = (Job j1, Job j2) -&gt;                Integer.compare(j2.profit, j1.profit);        //arrange the jobs in decreasing order of profit.        PriorityQueue&lt;Job&gt; heap = new PriorityQueue&lt;&gt;(compareByDeadlineAndProfit);        int maxDeadline = Integer.MIN_VALUE;        for(int i=0;i&lt;arr.length;i++){            maxDeadline = Integer.max(maxDeadline, arr[i].deadline);            heap.add(arr[i]);        }        int[] slots = new int[arr.length];        while (!heap.isEmpty()) {            Job job = heap.poll();            for (int i = job.deadline; i &gt;= 0; i--) {                if (slots[i] == 0) {                    slots[i] = job.profit;                    break;                }            }        }        return -1;    }    static class Job {        int id, profit, deadline;        Job(int x, int y, int z) {            this.id = x;            this.deadline = y;            this.profit = z;        }        @Override        public String toString() {            return \"Job{\" +                    \"id=\" + id +                    \", profit=\" + profit +                    \", deadline=\" + deadline +                    '}';        }    }    public static void main(String[] args) {        JobSequencing jobSequencing = new JobSequencing();        Job[] arr = {new Job(1, 4, 20), new Job(2, 1, 10), new Job(3, 1, 40), new Job(4, 1, 30)};        jobSequencing.maxProfitByJobSequencing(arr, 4);    }</code></pre>",
            "url": "http://localhost:4000/myblog/2022/07/13/job-sequencing",
            
            
            
            
            
            "date_published": "2022-07-13T00:00:00+05:30",
            "date_modified": "2022-07-13T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2021/07/07/cplusplus",
            "title": "C++ Makefile.",
            "summary": null,
            "content_text": "source code (sample.c) -&gt; preprocessor converts to -&gt; expanded source code (sample.i)assembler converts to -&gt; assembly code (sample.s)compiler -&gt; object file (sample.o) [MACHINE DEPENDABLE CODE]linker -&gt; links object code with libraries to produce a.out file.preprocessor -&gt; expands the #include &amp; #if def. to convert to expanded source code.sample.cpp     can be converted         1. (a.out) binary executable         2. (.so) shared object/library (.so) (requires passing of -shared flag)        3. (.o) object code (requires passing of -c)        4. (.a) static libary (ar rcs) (One or more .o files (object files inside a ))Structure    libs - dynamic libraries.    bins - binaries.Make - a tool    process’ the makefile and executes intructions inside it.Makefile -     automates the build process.    needs a targetmakefile defines a target clean which is not actually present. Hence this is called a phony target.Makefile may have multiple target.make file’s default target is it first defined target.Use .DEFAULT_GOAL to override it.  makefile```all: make_dir create_filesmake_dir:        mkdir -p d1 d2 d3create_files:        touch f1.c f2.c f3.cclear:        -rm .c        rm -rf d```",
            "content_html": "<p>source code (sample.c) -&gt; preprocessor converts to -&gt; expanded source code (sample.i)assembler converts to -&gt; assembly code (sample.s)compiler -&gt; object file (sample.o) [MACHINE DEPENDABLE CODE]linker -&gt; links object code with libraries to produce a.out file.</p><p>preprocessor -&gt; expands the #include &amp; #if def. to convert to expanded source code.</p><p>sample.cpp     can be converted         1. (a.out) binary executable         2. (.so) shared object/library (.so) (requires passing of -shared flag)        3. (.o) object code (requires passing of -c)        4. (.a) static libary (ar rcs) (One or more .o files (object files inside a ))</p><p>Structure    libs - dynamic libraries.    bins - binaries.</p><p>Make - a tool    process’ the makefile and executes intructions inside it.</p><p>Makefile -     automates the build process.    needs a target</p><p>makefile defines a target clean which is not actually present. Hence this is called a phony target.</p><p>Makefile may have multiple target.make file’s default target is it first defined target.Use .DEFAULT_GOAL to override it.</p><blockquote>  <p>makefile```all: make_dir create_files</p></blockquote><p>make_dir:        mkdir -p d1 d2 d3</p><p>create_files:        touch f1.c f2.c f3.c</p><p>clear:        -rm <em>.c        rm -rf d</em>```</p>",
            "url": "http://localhost:4000/myblog/2021/07/07/cplusplus",
            
            
            
            
            
            "date_published": "2021-07-07T00:00:00+05:30",
            "date_modified": "2021-07-07T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/myblog/2021/06/07/stringjoiner",
            "title": "Java String Joiner",
            "summary": null,
            "content_text": "  Using a delimiter of “, “, appending strings will produce the result  one, two, three.    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Can be done similar to a strinbuilder , as add returns the string joiner object.    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Using starting and ending values.    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }  To create a pattern as [one], [two], [three]```@Testpublic void testStringJoinerCreatingSquareBracketPattern() {    StringJoiner stringJoiner = new StringJoiner(\"], [\",\"[\",\"]\");    stringJoiner.add(\"one\");    stringJoiner.add(\"two\");    stringJoiner.add(\"three\");    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }",
            "content_html": "<blockquote>  <p>Using a delimiter of “, “, appending strings will produce the result  one, two, three.</p></blockquote><pre><code>    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre><blockquote>  <p>Can be done similar to a strinbuilder , as add returns the string joiner object.</p></blockquote><pre><code>    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre><blockquote>  <p>Using starting and ending values.</p></blockquote><pre><code>    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }</code></pre><blockquote>  <p>To create a pattern as [one], [two], [three]</p></blockquote><p>```</p><pre><code>@Testpublic void testStringJoinerCreatingSquareBracketPattern() {    StringJoiner stringJoiner = new StringJoiner(\"], [\",\"[\",\"]\");    stringJoiner.add(\"one\");    stringJoiner.add(\"two\");    stringJoiner.add(\"three\");    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }</code></pre>",
            "url": "http://localhost:4000/myblog/2021/06/07/stringjoiner",
            
            
            
            
            
            "date_published": "2021-06-07T00:00:00+05:30",
            "date_modified": "2021-06-07T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}