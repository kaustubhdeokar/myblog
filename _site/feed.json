{
    "version": "https://jsonfeed.org/version/1",
    "title": "Kaustubh Deokar",
    "home_page_url": "http://localhost:4000/myblog/",
    "feed_url": "http://localhost:4000/myblog/feed.json",
    "description": "Portfolio blog",
    "icon": "http://localhost:4000/myblog/apple-touch-icon.png",
    "favicon": "http://localhost:4000/myblog/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/myblog/2021/06/07/stringjoiner",
            "title": "String Joiner",
            "summary": "Java String Joiner API",
            "content_text": "  Using a delimiter of “, “, appending strings will produce the result  one, two, three.    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Can be done similar to a strinbuilder , as add returns the string joiner object.    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }  Using starting and ending values.    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }  To create a pattern as [one], [two], [three]```    /**     * To create a pattern as [one], [two], [three]     * So [ would be the starting symbol.     * ] would be the ending symbol.     * ], [ would be the delimiter.     */    @Test    public void testStringJoinerCreatingSquareBracketPattern() {        StringJoiner stringJoiner = new StringJoiner(“], [”,”[”,”]”);        stringJoiner.add(“one”);        stringJoiner.add(“two”);        stringJoiner.add(“three”);    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }",
            "content_html": "<blockquote>  <p>Using a delimiter of “, “, appending strings will produce the result  one, two, three.</p></blockquote><pre><code>    @Test    public void testStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre><blockquote>  <p>Can be done similar to a strinbuilder , as add returns the string joiner object.</p></blockquote><pre><code>    @Test    public void testStringJoinerReturnsStringJoiner() {        StringJoiner stringJoiner = new StringJoiner(\", \");        stringJoiner.add(\"one\").add(\"two\").add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"one, two, three\");    }</code></pre><blockquote>  <p>Using starting and ending values.</p></blockquote><pre><code>    @Test    public void testStringJoinerWithStartingAndEndingValues() {        StringJoiner stringJoiner = new StringJoiner(\", \",\"Start{\",\"}End\");        stringJoiner.add(\"one\");        stringJoiner.add(\"two\");        stringJoiner.add(\"three\");        Assert.assertEquals(stringJoiner.toString(), \"Start{one, two, three}End\");    }</code></pre><blockquote>  <p>To create a pattern as [one], [two], [three]</p></blockquote><p>```    /**     * To create a pattern as [one], [two], [three]     * So [ would be the starting symbol.     * ] would be the ending symbol.     * ], [ would be the delimiter.     */    @Test    public void testStringJoinerCreatingSquareBracketPattern() {        StringJoiner stringJoiner = new StringJoiner(“], [”,”[”,”]”);        stringJoiner.add(“one”);        stringJoiner.add(“two”);        stringJoiner.add(“three”);</p><pre><code>    Assert.assertEquals(stringJoiner.toString(), \"[one], [two], [three]\");} }</code></pre>",
            "url": "http://localhost:4000/myblog/2021/06/07/stringjoiner",
            
            
            
            
            
            "date_published": "2021-06-07T00:00:00+05:30",
            "date_modified": "2021-06-07T00:00:00+05:30",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}